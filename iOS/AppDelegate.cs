// This file has been autogenerated from a class added in the UI designer.

#region NameSpace
using System;
using Foundation;
using Foundation;
using UIKit;
using System.IO;
using Bidvalet.Model;
using Bidvalet.Business;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq;
using Microsoft.AppCenter;
using Microsoft.AppCenter.Analytics;
using Microsoft.AppCenter.Crashes;
using CoreLocation;
using System.ServiceModel;
using iOSPasswordStorage;
using Security;
using WBidPushService.Model;
using UserNotifications;
using Bidvalet.iOS.Utility;
#endregion

namespace Bidvalet.iOS
{
   
    public partial class AppDelegate : UIApplicationDelegate, ICLLocationManagerDelegate
    {
        // class-level declarations
        string tok = string.Empty;
        public string devID = string.Empty;
        private readonly CLLocationManager locationManager = new CLLocationManager();

        public override UIWindow Window
        {
            get;
            set;
        }
		public BidAwardView objAppBidAward;
        public static UIStoryboard Storyboard = UIStoryboard.FromName("Main", null);
        public static AppDelegate Self { get; private set; }
        #region Events
        public override bool FinishedLaunching(UIApplication application, NSDictionary launchOptions)
        {


            locationManager.Delegate = this;
            locationManager.RequestWhenInUseAuthorization();

            if (CLLocationManager.LocationServicesEnabled)
            {
                
            }

            // Override point for customization after application launch.
            // If not required for your application you can safely delete this method
            try
            {
                //Task startupWork = new Task(() =>
                //{
                //    Task.Delay(5000);

                //});
                //Visual studio app center tool integration- SDK start
                AppCenter.Start("7112e119-7dc5-44dd-b9dd-12dca6947883",typeof(Analytics), typeof(Crashes));

                //Get Username and Password in Key Chain Or Create Defaults values if it is not exists in key chain

                devID = KeychainHelpers.GetPasswordForUsername("DeviceID", "WBidValet.ID", false);
                if (string.IsNullOrEmpty(devID))
                {

                    KeychainHelpers.SetPasswordForUsername("DeviceID", UIDevice.CurrentDevice.IdentifierForVendor.AsString(), "WBidValet.ID", SecAccessible.Always, false);
                    devID = KeychainHelpers.GetPasswordForUsername("DeviceID", "WBidValet.ID", false);
                }

                UIWindow window;
                AppDelegate.Self = this;
                var server = NSUserDefaults.StandardUserDefaults["IsVPSServiceOn"];
                bool vpsServer = false;
                if (server == null)
                {
                    vpsServer = true;
                    NSUserDefaults.StandardUserDefaults.SetBool(true, "IsVPSServiceOn");

                }
                else
                    vpsServer = NSUserDefaults.StandardUserDefaults.BoolForKey("IsVPSServiceOn");


                GlobalSettings.IsVPSServiceOn = vpsServer;


                if (GlobalSettings.IsVPSServiceOn)
                {
                    GlobalSettings.WBidAuthenticationServiceUrl = GlobalSettings.VPSAuthenticationServiceUrl;
                }
                else
                {
                    GlobalSettings.WBidAuthenticationServiceUrl = GlobalSettings.VofoxAuthenticationServiceUrl;

                }
                InvokeInBackground(() =>
                {
                    GetApplicaitonLoadData();
                });

                //startupWork.ContinueWith(t =>
                //{
                //  System.Threading.Thread.Sleep(2000);
                InitialLoading(application);
                // });


//				// create a new window instance based on the screen size
//				window = new UIWindow(UIScreen.MainScreen.Bounds);
//
//				// If you have defined a root view controller, set it here:
//				window.RootViewController = new RootViewController();
//
//				// make the window visible
//				window.MakeKeyAndVisible();

				return true;
            }
            catch (Exception ex)
            {
            }

            return true;
        }
        private void GetApplicaitonLoadData()
        {
            try
            {
                ApplicationData appdata = new ApplicationData();
                appdata.FromApp = 3;
                var jsonData = SerializeHelper.JsonObjectToStringSerializerMethod<ApplicationData>(appdata);
                StreamReader dr = ServiceUtility.GetRestData("GetApplicationLoadDatas", jsonData);
                var appLoadData = SerializeHelper.ConvertJSonStringToObject<ApplicationLoadData>(dr.ReadToEnd());
                GlobalSettings.IsNeedToEnableVacDiffButton = appLoadData.IsNeedtoEnableVacationDifference;
                GlobalSettings.ServerFlightDataVersion = appLoadData.FlightDataVersion;
                GlobalSettings.IsNeedToEnableVacDiffButton = true;
            }
            catch (Exception ex)
            {
            }
        }
        public override void OnResignActivation(UIApplication application)
        {
            // Invoked when the application is about to move from active to inactive state.
            // This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) 
            // or when the user quits the application and it begins the transition to the background state.
            // Games should use this method to pause the game.
        }

        public override void DidEnterBackground(UIApplication application)
        {
            // Use this method to release shared resources, save user data, invalidate timers and store the application state.
            // If your application supports background exection this method is called instead of WillTerminate when the user quits.
        }

        public override void WillEnterForeground(UIApplication application)
        {
            // Called as part of the transiton from background to active state.
            // Here you can undo many of the changes made on entering the background.

            try
            {


                //Send Crash email
                InvokeInBackground(() =>
                {
                    SendCrashMail();
                });



                //SendOfflineEvents
                InvokeInBackground(() =>
                {
                    SendOfflineEvents();
                });

                InvokeInBackground(() =>
                {
                    SendOfflinePayments();
                });
                InvokeInBackground(() =>
                {
                    GetApplicaitonLoadData();
                });

            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        public override void OnActivated(UIApplication application)
        {
            // Restart any tasks that were paused (or not yet started) while the application was inactive. 
            // If the application was previously in the background, optionally refresh the user interface.
            application.ApplicationIconBadgeNumber = -1;
            if (Reachability.CheckVPSAvailable() && NSUserDefaults.StandardUserDefaults["CVisRegistered"] != null)
            {
                WBidPushSerivceClient client = null;
                BasicHttpBinding binding = ServiceUtility.CreateBasicHttp();
                client = new WBidPushSerivceClient(binding, ServiceUtility.PushEndPoint);
                client.InnerChannel.OperationTimeout = new TimeSpan(0, 0, 30);
                ResetBadgeParam resetbadge = new ResetBadgeParam();
                resetbadge.deviceId = new Guid(devID);
                resetbadge.FromAppNumber = 3;
                client.ResetPushBadgeAsync(resetbadge);
            }
        }

        public override void WillTerminate(UIApplication application)
        {
            // Called when the application is about to terminate. Save data, if needed. See also DidEnterBackground.
        }
        //[Export("application:didFailToRegisterForRemoteNotificationsWithError:")]
        public override void FailedToRegisterForRemoteNotifications(UIApplication application, NSError error)
        {
            Console.WriteLine(error.ToString());
           
          InvokeOnMainThread(() =>
          {
              UIAlertView alert = new UIAlertView("WBidMax", error.ToString(), null, "OK", null);
              alert.Show();

              //UIWindow WindowAlert = new UIWindow(UIScreen.MainScreen.Bounds);
              //WindowAlert.RootViewController = new UIViewController();
              //UIAlertController okAlertController = UIAlertController.Create("WBidMax Notification", error.ToString(), UIAlertControllerStyle.Alert);
              //okAlertController.AddAction(UIAlertAction.Create("OK", UIAlertActionStyle.Default, null));
              //WindowAlert.MakeKeyAndVisible();
              //WindowAlert.RootViewController.PresentViewController(okAlertController, true, null);
              //WindowAlert.Dispose();
          });
        }
        //[Export("application:didRegisterForRemoteNotificationsWithDeviceToken:")]
        public override void RegisteredForRemoteNotifications(UIApplication application, NSData deviceToken)
        {
            try
            {
                WBidPushSerivceClient client = null;
                BasicHttpBinding binding = ServiceUtility.CreateBasicHttp();
                client = new WBidPushSerivceClient(binding, ServiceUtility.PushEndPoint);
                client.InnerChannel.OperationTimeout = new TimeSpan(0, 0, 30);
                client.RegisterDevicesForPushNotiifcationCompleted += Client_RegisterDevicesForPushNotiifcationCompleted;

                if (deviceToken != null)
                {
                    byte[] result = new byte[deviceToken.Length];
                    System.Runtime.InteropServices.Marshal.Copy(deviceToken.Bytes, result, 0, (int)deviceToken.Length);
                    tok = BitConverter.ToString(result).Replace("-", "");


                    PushDeviceDetails pushDetails = new PushDeviceDetails();
                    pushDetails.BadgeCount = 0;
                    pushDetails.DeviceTocken = tok;
                    pushDetails.DeviceId = new Guid(devID);
                    pushDetails.DeviceType = "iPhone";
                    pushDetails.EmpNo = int.Parse(GlobalSettings.UserInfo.EmpNo.Replace("e", ""));
                    pushDetails.IsActive = true;
                    pushDetails.FromAppNumber = 3;

                    if (NSUserDefaults.StandardUserDefaults["CVToken"] == null && NSUserDefaults.StandardUserDefaults["CVisRegistered"] == null)
                    {
                        NSUserDefaults.StandardUserDefaults.SetString(tok, "Token");
                        // Call reg service here
                        //if (Reachability.IsHostReachable(GlobalSettings.ServerUrl))
                        if (Reachability.CheckVPSAvailable())
                        {
                            //client.RegistorDevicesAsync(pushDetails);
                            client.RegisterDevicesForPushNotiifcationAsync(pushDetails);

                        }
                    }
                    else if (NSUserDefaults.StandardUserDefaults["CVToken"] != null && NSUserDefaults.StandardUserDefaults["CVisRegistered"] == null)
                    {
                        // Call reg service here 
                        if (Reachability.CheckVPSAvailable())
                        {
                            //client.RegistorDevicesAsync(pushDetails);
                            client.RegisterDevicesForPushNotiifcationAsync(pushDetails);
                        }
                    }
                    else if (NSUserDefaults.StandardUserDefaults["CVisRegistered"] != null && NSUserDefaults.StandardUserDefaults["CVToken"].ToString() != tok)
                    {
                        // Call reg service here 
                        if (Reachability.CheckVPSAvailable())
                        {
                            //client.RegistorDevicesAsync(pushDetails);
                            client.RegisterDevicesForPushNotiifcationAsync(pushDetails);
                        }
                    }

                    Console.WriteLine(pushDetails.DeviceId.ToString());
                }
            }
            catch (Exception ex)
            {
                UIAlertView alert = new UIAlertView("WBidMax", ex.InnerException.ToString(), null, "OK", null);
                alert.Show();
                throw ex;
            }
        }
        //public override void RegisteredForRemoteNotifications(UIApplication application, NSData deviceToken)
        //{
        //    WBidPushSerivceClient client = null;
        //    BasicHttpBinding binding = ServiceUtility.CreateBasicHttp();
        //    client = new WBidPushSerivceClient(binding, ServiceUtility.PushEndPoint);
        //    client.InnerChannel.OperationTimeout = new TimeSpan(0, 0, 30);
        //    // client.RegistorDevicesCompleted += client_RegistorDevicesCompleted;
        //    client.RegisterDevicesForPushNotiifcationCompleted += Client_RegisterDevicesForPushNotiifcationCompleted;

        //    if (deviceToken != null)
        //    {
        //        byte[] result = new byte[deviceToken.Length];
        //        System.Runtime.InteropServices.Marshal.Copy(deviceToken.Bytes, result, 0, (int)deviceToken.Length);
        //        tok = BitConverter.ToString(result).Replace("-", "");
        //        //tok = deviceToken.ToString();
        //        //            tok = tok.Replace("<", "");
        //        //            tok = tok.Replace(">", "");
        //        //            tok = tok.Replace(" ", "");
        //        //            Console.WriteLine("Device Token: " + tok);

        //        PushDeviceDetails pushDetails = new PushDeviceDetails();
        //        pushDetails.BadgeCount = 0;
        //        pushDetails.DeviceTocken = tok;
        //        pushDetails.DeviceId = new Guid(devID);
        //        pushDetails.DeviceType = "iPad";
        //        pushDetails.EmpNo = int.Parse(GlobalSettings.UserInfo.EmpNo.Replace("e", ""));
        //        pushDetails.IsActive = true;
        //        pushDetails.FromAppNumber = 4;

        //        if (NSUserDefaults.StandardUserDefaults["Token"] == null && NSUserDefaults.StandardUserDefaults["isRegistered"] == null)
        //        {
        //            NSUserDefaults.StandardUserDefaults.SetString(tok, "Token");
        //            // Call reg service here
        //            //if (Reachability.IsHostReachable(GlobalSettings.ServerUrl))
        //            if (Reachability.CheckVPSAvailable())
        //            {
        //                //client.RegistorDevicesAsync(pushDetails);
        //                client.RegisterDevicesForPushNotiifcationAsync(pushDetails);

        //            }
        //        }
        //        else if (NSUserDefaults.StandardUserDefaults["Token"] != null && NSUserDefaults.StandardUserDefaults["isRegistered"] == null)
        //        {
        //            // Call reg service here 
        //            if (Reachability.CheckVPSAvailable())
        //            {
        //                //client.RegistorDevicesAsync(pushDetails);
        //                client.RegisterDevicesForPushNotiifcationAsync(pushDetails);
        //            }
        //        }
        //        else if (NSUserDefaults.StandardUserDefaults["isRegistered"] != null && NSUserDefaults.StandardUserDefaults["Token"].ToString() != tok)
        //        {
        //            // Call reg service here 
        //            if (Reachability.CheckVPSAvailable())
        //            {
        //                //client.RegistorDevicesAsync(pushDetails);
        //                client.RegisterDevicesForPushNotiifcationAsync(pushDetails);
        //            }
        //        }

        //        Console.WriteLine(pushDetails.DeviceId.ToString());
        //    }
        //}

        private void Client_RegisterDevicesForPushNotiifcationCompleted(object sender, RegisterDevicesForPushNotiifcationCompletedEventArgs e)
        {
            try
            {
                if (e.Result > 0)
                {
                    NSUserDefaults.StandardUserDefaults.SetString(tok, "CVToken");
                    NSUserDefaults.StandardUserDefaults.SetString("YES", "CVisRegistered");
                    NSUserDefaults.StandardUserDefaults.Synchronize();
                }
            }
            catch (Exception ex)
            {
                UIAlertView alert = new UIAlertView("WBidMax", ex.InnerException.ToString(), null, "OK", null);
                alert.Show();
                throw ex;
            }
        }
       

        public override void DidReceiveRemoteNotification(UIApplication application, NSDictionary userInfo, Action<UIBackgroundFetchResult> completionHandler)
        {
            try
            {
                NSObject dict = userInfo.ValueForKey(new NSString("aps"));
                dict = dict.ValueForKey(new NSString("alert"));

                UIWindow WindowAlert = new UIWindow(UIScreen.MainScreen.Bounds);
                WindowAlert.RootViewController = new UIViewController();
                UIAlertController okAlertController = UIAlertController.Create("WBidMax Notification", dict.ToString(), UIAlertControllerStyle.Alert);
                okAlertController.AddAction(UIAlertAction.Create("OK", UIAlertActionStyle.Default, null));
                WindowAlert.MakeKeyAndVisible();
                WindowAlert.RootViewController.PresentViewController(okAlertController, true, null);
                WindowAlert.Dispose();

                application.ApplicationIconBadgeNumber = -1;
                if (Reachability.CheckVPSAvailable() && NSUserDefaults.StandardUserDefaults["CVisRegistered"] != null)
                {
                    WBidPushSerivceClient client = null;
                    BasicHttpBinding binding = ServiceUtility.CreateBasicHttp();
                    client = new WBidPushSerivceClient(binding, ServiceUtility.PushEndPoint);
                    client.InnerChannel.OperationTimeout = new TimeSpan(0, 0, 30);
                    //client.ResetBadgeAsync (new Guid (devID));
                    ResetBadgeParam resetbadge = new ResetBadgeParam();
                    resetbadge.deviceId = new Guid(devID);
                    resetbadge.FromAppNumber = 3;
                    client.ResetPushBadgeAsync(resetbadge);
                }
            }
            catch (Exception ex)
            {
                UIAlertView alert = new UIAlertView("WBidMax", ex.InnerException.ToString(), null, "OK", null);
                alert.Show();
                throw ex;
            }
        }
        #endregion

        #region Methods

        /// <summary>
        /// Load user ,INI, send crash,offline events etc
        /// </summary>
        private void InitialLoading(UIApplication app)
        {
            try
            {

                //Read the user file content if the user file exist
                if (File.Exists(WBidHelper.WBidUserFilePath))
                {
                    GlobalSettings.UserInfo = (UserInformation)XmlHelper.DeserializeFromXml<UserInformation>(WBidHelper.WBidUserFilePath);
                }
                if (GlobalSettings.UserInfo != null)
                {
                    var version = UIDevice.CurrentDevice.SystemVersion.Split('.');
                    string compVersion = version[0] + "." + version[1];
                    if (float.Parse(compVersion) < 8.0)
                    {
                        UIRemoteNotificationType notificationTypes = UIRemoteNotificationType.Alert | UIRemoteNotificationType.Badge | UIRemoteNotificationType.Sound;
                        app.RegisterForRemoteNotificationTypes(notificationTypes);
                    }
                    else
                    {
                        UNUserNotificationCenter notification = UNUserNotificationCenter.Current;
                        notification.Delegate = new UserNotificationCenterDelegate();

                        notification.RequestAuthorization(UNAuthorizationOptions.Alert, (approved, err) =>
                        {
                            // Handle approval

                            if (err == null)
                            {
                                InvokeOnMainThread(() =>
                                {
                                    UIApplication.SharedApplication.RegisterForRemoteNotifications();
                                });

                            }
                            else
                            {

                            }
                        });
                    }
                }
                    //Create/Load INI and DWC files
                    LoadInitialContentFromFile();



                //Icloud prevention
                var exURL = NSUrl.FromFilename(WBidHelper.GetAppDataPath() + "/");
                bool flag = exURL.SetResource(new NSString("NSURLIsExcludedFromBackupKey"), NSNumber.FromBoolean(true));

                if (flag) Console.WriteLine("success");
                else Console.WriteLine("failer");

                //Send Crash email
                InvokeInBackground(() =>
                {
                    SendCrashMail();
                });



                //SendOfflineEvents
                InvokeInBackground(() =>
                {
                    SendOfflineEvents();
                });

                InvokeInBackground(() =>
               {
                   SendOfflinePayments();
               });

            }
            catch (Exception ex)
            {
                UIAlertView alert = new UIAlertView("WBidMax", ex.InnerException.ToString(), null, "OK", null);
                alert.Show();
                throw ex;
            }
        }

        /// <summary>
        /// Loads the initial content from file.
        /// </summary>
        private static void LoadInitialContentFromFile()
        {
            try
            {
                //Check the App directory exists. If not exists  then create the same.
                if (!Directory.Exists(WBidHelper.GetAppDataPath()))
                {
                    //create app data folder
                    WBidHelper.CreateAppDataDirectory();
                }

            
              
                //cheCk the INI file is ceated or not.If not,create it.
                if (!File.Exists(WBidHelper.GetWBidINIFilePath()))
                {
                    WBidINI wbidINI = WBidCollection.CreateINIFile();
                    XmlHelper.SerializeToXml(wbidINI, WBidHelper.GetWBidINIFilePath());
                }
                //read the values of the INI file.
                GlobalSettings.WBidINIContent = XmlHelper.DeserializeFromXml<WBidINI>(WBidHelper.GetWBidINIFilePath());
				//remove previous line 300 and line 500 columns
				GlobalSettings.WBidINIContent.SummaryVacationColumns.RemoveAll(x => x.Id == 58 || x.Id == 59);
				//remove the legs in 500 and legs in 300 columns
				GlobalSettings.WBidINIContent.DataColumns.RemoveAll(x => x.Id == 58 || x.Id == 59);
				if (!(GlobalSettings.WBidINIContent.Domiciles.Any(x => x.DomicileName == "AUS")))
					GlobalSettings.WBidINIContent.Domiciles.Add(new Domicile { DomicileName = "AUS", DomicileId = 11, Code = "T", Number = 11 });
				if (!(GlobalSettings.WBidINIContent.Domiciles.Any(x => x.DomicileName == "FLL")))
					GlobalSettings.WBidINIContent.Domiciles.Add(new Domicile { DomicileName = "FLL", DomicileId = 12, Code = "T", Number = 12 });
                if (GlobalSettings.WBidINIContent.SenioritylistFormat.Count == 0)
                {
                    GlobalSettings.WBidINIContent.SenioritylistFormat = WBidCollection.getDefaultSenlistFormatValue();
                }
                //Create/Read the DWC file
                if (!File.Exists(WBidHelper.GetWBidDWCFilePath()))
                {
                    WBidIntialState WBidIntialState = WBidCollection.CreateDWCFile(GlobalSettings.DwcVersion);
                    XmlHelper.SerializeToXml(WBidIntialState, WBidHelper.GetWBidDWCFilePath());
                }
                else
                {
                    WBidIntialState wbidintialState = null;
                    try
                    {
                        wbidintialState = XmlHelper.DeserializeFromXml<WBidIntialState>(WBidHelper.GetWBidDWCFilePath());
                    }
                    catch (Exception ex)
                    {
                        wbidintialState = WBidCollection.CreateDWCFile(GlobalSettings.DwcVersion);
                        XmlHelper.SerializeToXml(wbidintialState, WBidHelper.GetWBidDWCFilePath());
                        if (GlobalSettings.UserInfo!= null)
                        {
                            WBidHelper.LogDetails(GlobalSettings.UserInfo.EmpNo, "dwcRecreate", "0", "0");
                        }

                    }


                }
            }
            catch (Exception ex)
            {

                throw ex;
            }



        }

        /// <summary>
        /// Sends the crash mail.
        /// </summary>
        private void SendCrashMail()
        {

            if (GlobalSettings.WBidINIContent == null || GlobalSettings.WBidINIContent.User == null)
                return;


            if (File.Exists(WBidHelper.GetAppDataPath() + "/Crash/" + "Crash.log") && GlobalSettings.WBidINIContent.User.IsNeedCrashMail)
            {
                //Check internet wavailable
                int typeOfInternetConnection;
                typeOfInternetConnection = InternetHelper.CheckInterNetConnection();
                if (typeOfInternetConnection == (int)InternetType.Ground || typeOfInternetConnection == (int)InternetType.AirPaid)
                {

                    string content = System.IO.File.ReadAllText(WBidHelper.GetAppDataPath() + "/Crash/" + "Crash.log");
                    WBidMail wbidMail = new WBidMail();
                    //						#ifdef DEBUG
                    //
                    //						//Debug mode
                    //
                    //						#else
                    //						//Release mode

                    wbidMail.SendCrashMail(content);
                    //
                    //						#endif

                    InvokeOnMainThread(() =>
                    {
                        File.Delete(WBidHelper.GetAppDataPath() + "/Crash/" + "Crash.log");
                    });
                }
            }
        }

        /// <summary>
        /// Send Offline events
        /// </summary>
        private void SendOfflineEvents()
        {

            try
            {

                if (File.Exists(WBidHelper.GetWBidInternalLogFilePath()))
                {
                    //Check internet wavailable
                    int typeOfInternetConnection;
                    typeOfInternetConnection = InternetHelper.CheckInterNetConnection();
                    if (typeOfInternetConnection == (int)InternetType.Ground || typeOfInternetConnection == (int)InternetType.AirPaid)
                    {

                        // string content = System.IO.File.ReadAllText(WBidHelper.GetAppDataPath() + "/Crash/" + "Crash.log");

                        //						#ifdef DEBUG
                        //
                        //						//Debug mode
                        //
                        //						#else
                        //						//Release mode


                        List<LogInformation> logInformation = XmlHelper.DeserializeFromXml<List<LogInformation>>(WBidHelper.GetWBidInternalLogFilePath());
                        OffLineHelper objOffline = new OffLineHelper();
                        objOffline.OffLineEvents = logInformation;

                        bool result = RestHelper.LogOfflineEvents(objOffline);

                        if (result)
                        {
                            BeginInvokeOnMainThread(() =>
                            {
                                File.Delete(WBidHelper.GetWBidInternalLogFilePath());
                            });
                        }
                        //
                        //						#endif


                    }
                }
            }
            catch (Exception ex)
            {
                InvokeOnMainThread(() =>
                {
                    throw ex;
                });
            }
        }



        private void SendOfflinePayments()
        {

            try
            {

                if (File.Exists(WBidHelper.GetWBidOfflinePaymentFilePath()))
                {
                    //Check internet wavailable
                    int typeOfInternetConnection;
                    typeOfInternetConnection = InternetHelper.CheckInterNetConnection();
                    if (typeOfInternetConnection == (int)InternetType.Ground || typeOfInternetConnection == (int)InternetType.AirPaid)
                    {

                        // string content = System.IO.File.ReadAllText(WBidHelper.GetAppDataPath() + "/Crash/" + "Crash.log");

                        //						#ifdef DEBUG
                        //
                        //						//Debug mode
                        //
                        //						#else
                        //						//Release mode


                        PaymentUpdateModel paymentUpdateModel = XmlHelper.DeserializeFromXml<PaymentUpdateModel>(WBidHelper.GetWBidOfflinePaymentFilePath());

                        ServerUserInformation userInfo = RestHelper.UpdateAllPaidUntilDate(paymentUpdateModel);

                        if (userInfo != null)
                        {
                            if (GlobalSettings.UserInfo != null)
                            {
                                GlobalSettings.UserInfo.PaidUntilDate = userInfo.WBExpirationDate;
                                GlobalSettings.UserInfo.IsFree = userInfo.IsFree;
                                GlobalSettings.UserInfo.IsMonthlySubscribed = userInfo.IsMonthlySubscribed;
                                GlobalSettings.UserInfo.IsYearlySubscribed = userInfo.IsYearlySubscribed;
								GlobalSettings.UserInfo.IsCBMonthlySubscribed = userInfo.IsCBMonthlySubscribed;
								GlobalSettings.UserInfo.IsCBYearlySubscribed = userInfo.IsCBYearlySubscribed;
                                GlobalSettings.UserInfo.TopSubscriptionLine = userInfo.TopSubscriptionLine;
                                GlobalSettings.UserInfo.SecondSubscriptionLine = userInfo.SecondSubscriptionLine;
                                GlobalSettings.UserInfo.ThirdSubscriptionLine = userInfo.ThirdSubscriptionLine;
                                
                                BeginInvokeOnMainThread(() =>
                                {
                                    WBidHelper.SaveUserFile(GlobalSettings.UserInfo, WBidHelper.WBidUserFilePath);
                                    File.Delete(WBidHelper.GetWBidOfflinePaymentFilePath());
                                   // var window = UIApplication.SharedApplication.KeyWindow;
                                   // var vc = window.RootViewController;
                                   //// UIViewController View = this.NavigationController.TopViewController;

                                   // if( View.GetType() == typeof(SubScriptionViewController))
                                   // {
                                   //     Console.WriteLine("same class");
                                   // }
                                   // while (vc.PresentedViewController != null)
                                   // {
                                   //     vc = vc.PresentedViewController;
                                   // }
                                    

                                    NSNotificationCenter.DefaultCenter.PostNotificationName("UpdateUI", null);

                                });
                            }
                        }
                        //
                        //						#endif


                    }
                }
            }
            catch (Exception ex)
            {
                InvokeOnMainThread(() =>
                {
                    throw ex;
                });
            }
        }


        #endregion

    }
    public class UserNotificationCenterDelegate : UNUserNotificationCenterDelegate
    {

        public string devID;
        #region Override Methods
        public override void DidReceiveNotificationResponse(UNUserNotificationCenter center, UNNotificationResponse response, Action completionHandler)
        {


            NSObject dict = response.Notification.Request.Content.UserInfo.ValueForKey(new NSString("aps"));
            dict = dict.ValueForKey(new NSString("alert"));
            UIWindow WindowAlert = new UIWindow(UIScreen.MainScreen.Bounds);
            WindowAlert.RootViewController = new UIViewController();
            UIAlertController okAlertController = UIAlertController.Create("WBidMax Notification", dict.ToString(), UIAlertControllerStyle.Alert);
            okAlertController.AddAction(UIAlertAction.Create("OK", UIAlertActionStyle.Default, null));
            WindowAlert.MakeKeyAndVisible();
            WindowAlert.RootViewController.PresentViewController(okAlertController, true, null);
            WindowAlert.Dispose();


            UIApplication.SharedApplication.ApplicationIconBadgeNumber = -1;

            if (Reachability.CheckVPSAvailable() && NSUserDefaults.StandardUserDefaults["CVisRegistered"] != null)
            {
                WBidPushSerivceClient client = null;
                BasicHttpBinding binding = ServiceUtility.CreateBasicHttp();
                client = new WBidPushSerivceClient(binding, ServiceUtility.PushEndPoint);
                client.InnerChannel.OperationTimeout = new TimeSpan(0, 0, 30);
                ResetBadgeParam resetbadge = new ResetBadgeParam();
                resetbadge.deviceId = new Guid(AppDelegate.Self.devID);
                resetbadge.FromAppNumber = 3;
                client.ResetPushBadgeAsync(resetbadge);
                //client.ResetBadgeAsync(new Guid(AppDelegate.Self.devID));
            }
            // Inform caller it has been handled
            completionHandler();
        }


        public override void WillPresentNotification(UNUserNotificationCenter center, UNNotification notification, Action<UNNotificationPresentationOptions> completionHandler)
        {
            completionHandler(UNNotificationPresentationOptions.Alert);

        }
        #endregion
    }
}
