// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using System.Collections.Generic;
using Bidvalet.Model;
using System.Linq;
using Bidvalet.Business;

namespace Bidvalet.iOS
{
    public partial class SortViewController : BaseViewController
    {
        List<string> listSortSelected = new List<string>();
        bool _buttonClicked = false;
        SortDataSource Source;
        public bool needTobyPassingScreen;
        public SortViewController(IntPtr handle)
            : base(handle)
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            Title = "Sort";
          
            ShowNavigationBar();
            UIHelpers.StyleForButtonsSortView(new UIButton[] {btnAdvancePay, btnAdvancePayBlock, btnAdvancePayDutty, btnAdvancePayPerDay,
				btnAdvancePayTafb,  btnPaySingle, 
				btnBlockPay, btnBlockPayDutty, btnBlockPerDiem, btnBlockPmAm, btnBlockVacPay,
				btnBlockWeekday, btnBlockDaysOff, btnBlockAmPm,btnLineNumber,btnEtops
            });
            UIHelpers.StyleForButtons(new UIButton[] { btnDoneBlockSort });
            Source = new SortDataSource(listSortSelected, this);

            tvBlockSort.Source = Source;
            tvBlockSort.ReloadData();
            tvBlockSort.BackgroundColor = UIColor.White;
            tvBlockSort.TableFooterView = new UIView();
            sgSelectSort.SelectedSegment = 0;
            if (sgSelectSort.SelectedSegment == 0)
				
            {
//                if (swSingleAdvance.State.ToString().Equals("ON"))
//                {
				swSingleAdvance.SetState(true, true);
				swSingleAdvance.Hidden = true;
                    scrollAdvance.Alpha = 1;
                    viewSinglePay.Alpha = 0;
                    swAdvance.SetState(true, false);
//                }
//                else
//                {
//                    swSingleAdvance.SetState(false, false);
//                    scrollAdvance.Alpha = 0;
//                    viewSinglePay.Alpha = 1;
//                }
                viewBlockSort.Alpha = 0;
            }
            else
            {
                scrollAdvance.Alpha = 0;
                viewSinglePay.Alpha = 0;
                viewBlockSort.Alpha = 1;
            }
            tvBlockSort.SetEditing(true, true);

            if (needTobyPassingScreen == true)
            {
                SubSortViewController viewController = Storyboard.InstantiateViewController("SubSortViewController") as SubSortViewController;

                viewController.needTobyPassingScreen = true;
                PushViewController(viewController, false);
                needTobyPassingScreen = false;

                WBidState wBIdStateContent = GlobalSettings.WBidStateCollection.StateList.FirstOrDefault(x => x.StateName == GlobalSettings.WBidStateCollection.DefaultName);
                if (wBIdStateContent.BidAuto != null)
                {
                   
                    if(wBIdStateContent.BidAuto.BASort!=null && wBIdStateContent.BidAuto.BASort.SortColumn == "BlockSort")
                    {
                        sgSelectSort.SelectedSegment = 1;
                        viewBlockSort.Alpha = 1;
                        scrollAdvance.Alpha = 0;
                        viewSinglePay.Alpha = 0;
                        var listStandardBlockSort = WBidCollection.GetStandardBlockSortListData();
                        List<string> blocksortlist = new List<string>();
                        foreach(var item in wBIdStateContent.BidAuto.BASort.BlokSort)
                        {
                            blocksortlist.Add(listStandardBlockSort.FirstOrDefault(x => x.Id.ToString() == item).Name);
                        }
                        viewController.isBlockSortSelected = true;
                        viewController.selectedSort = blocksortlist;
                        foreach (var text in blocksortlist)
                        {
                            if (!listSortSelected.Contains(text) && listSortSelected.Count < 8)
                            {
                                listSortSelected.Add(text);
                            }
                            Source.lstCurrentConstraint = listSortSelected;
                            tvBlockSort.ReloadData();
                        }
                    }
                    else
                    {
                        sgSelectSort.SelectedSegment = 0;
                        viewBlockSort.Alpha = 0;
                        viewController.isBlockSortSelected = false;
                        string sortcolumn = string.Empty;
                        switch(wBIdStateContent.BidAuto.BASort.SortColumn)
                        {
                            case "LinePay":
                                sortcolumn = "Pay";
                                break;
                            case "PayPerFlightHour":
                                sortcolumn = "Pay / Flt Hr";
                                break;
                            case "PayPerDutyHour":
                                sortcolumn = "Pay / Duty";
                                break;
                            case "PayPerTAFB":
                                sortcolumn = "Pay / TAFB";
                                break;
                            case "PayPerDay":
                                sortcolumn = "Pay / Day";
                                break;
                            case "LineNum":
                                sortcolumn = "Line";
                                break;
                           


                        }
                        viewController.selectedSort = new List<string> { sortcolumn };
                    }

                }

               
                return;
            }
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);
            _buttonClicked = false;
            UpdateButtonUI(new UIButton[]{btnPaySingle, btnAdvancePay, btnAdvancePayBlock, btnAdvancePayDutty, btnAdvancePayPerDay,
				btnAdvancePayTafb,  btnBlockAmPm, btnBlockPayDutty, btnBlockPerDiem, btnBlockPmAm,
				btnBlockVacPay, btnBlockWeekday,btnLineNumber,btnEtops}, "", false);
        }

        public void SetTableViewEditable(bool isEditting)
        {
            //			if (!isEditting) {
            //				this.tvBlockSort.SetEditing (false, true);
            //			} else {
            //				this.tvBlockSort.SetEditing (true, true);
            //			}
        }
        // handle event
        partial void OnPaySingleClickEvent(Foundation.NSObject sender)
        {
            _buttonClicked = true;
            SetSelectedSortToState("LinePay");
            UpdateButtonUI(new UIButton[] { btnPaySingle }, "Pay", false);
        }




        partial void OnAdvancePayBlockClickEvent(Foundation.NSObject sender)
        {
            _buttonClicked = true;
            SetSelectedSortToState("PayPerFlightHour");
            UpdateButtonUI(new UIButton[] { btnAdvancePayBlock }, "Pay / Flt Hr", false);
        }

        partial void OnAdvancePayClickEvent(Foundation.NSObject sender)
        {
            _buttonClicked = true;
            SetSelectedSortToState("LinePay");
            UpdateButtonUI(new UIButton[] { btnAdvancePay }, "Pay", false);
        }

        partial void OnAdvancePayDuttyClickEvent(Foundation.NSObject sender)
        {
            _buttonClicked = true;

            SetSelectedSortToState("PayPerDutyHour");
            UpdateButtonUI(new UIButton[] { btnAdvancePayDutty }, "Pay / Duty", false);
        }

        //		partial void OnAdvancePayFdpClickEvent (Foundation.NSObject sender)
        //		{
        //			_buttonClicked = true;
        //			UpdateButtonUI (new UIButton[]{btnAdvanePayFdp}, "Pay / FDP", false);
        //		}

        partial void OnAdvancePayTafbClickEvent(Foundation.NSObject sender)
        {
            _buttonClicked = true;
            SetSelectedSortToState("PayPerTAFB");
            UpdateButtonUI(new UIButton[] { btnAdvancePayTafb }, "Pay / TAFB", false);
        }

        partial void OnAdvancePayPerDayClickEvent(Foundation.NSObject sender)
        {
            _buttonClicked = true;
            SetSelectedSortToState("PayPerDay");
            UpdateButtonUI(new UIButton[] { btnAdvancePayPerDay }, "Pay / Day", false);
        }



        partial void OnBlockAmPmClickEvent(Foundation.NSObject sender)
        {
            AddSelectedContent((UIButton)sender);
            //			_buttonClicked = true;
            //			UpdateButtonUI (new UIButton[]{btnBlockPmAm}, "AMPM", true);
        }

        partial void OnEtopsClickEvent(Foundation.NSObject sender)
        {

            AddSelectedContent((UIButton)sender);
        }

        void AddSelectedContent(UIButton sd)
        {
            string text = sd.Title(UIControlState.Normal);
            if (!listSortSelected.Contains(text) && listSortSelected.Count < 8)
            {
                listSortSelected.Add(text);
            }
            Source.lstCurrentConstraint = listSortSelected;
            tvBlockSort.ReloadData();
        }
        public void ReloadTV()
        {
            tvBlockSort.ReloadData();
        }
        partial void OnBlockDaysOffClickEvent(Foundation.NSObject sender)
        {
            AddSelectedContent((UIButton)sender);
        }

        partial void OnBlockPayClickEvent(Foundation.NSObject sender)
        {
            AddSelectedContent((UIButton)sender);
        }

        partial void OnBlockPayDuttyClickEvent(Foundation.NSObject sender)
        {
            AddSelectedContent((UIButton)sender);
        }

        partial void OnBlockPerDiemClickEvent(Foundation.NSObject sender)
        {
            AddSelectedContent((UIButton)sender);
        }

        partial void OnBlockPmAmClickEvent(Foundation.NSObject sender)
        {
            AddSelectedContent((UIButton)sender);
        }

        partial void OnBlockVacPayClickEvent(Foundation.NSObject sender)
        {
            AddSelectedContent((UIButton)sender);
        }

        partial void OnBlockWeekdayClickEvent(Foundation.NSObject sender)
        {
            AddSelectedContent((UIButton)sender);
        }
		 partial void OnLineNumberClickEvent(NSObject sender)
		{
			_buttonClicked = true;
			SetSelectedSortToState("Line");
			UpdateButtonUI(new UIButton[] { btnLineNumber }, "Line", false);
		}
        void GoToSubSortView(bool isBlockSort, List<string> listValue)
        {
            SubSortViewController viewController = Storyboard.InstantiateViewController("SubSortViewController") as SubSortViewController;
            viewController.isBlockSortSelected = isBlockSort;
            viewController.selectedSort = listValue;
            PushViewController(viewController, true);
        }
        partial void OnDoneBlockSortClickEvent(Foundation.NSObject sender)
        {
            if (listSortSelected.Count == 0)
            {
                DisplayAlertView(GlobalSettings.ApplicationName, "Please select a sort option");
            }
            else
            {

                SetBlockSortListToState();

                GoToSubSortView(true, listSortSelected);
            }
        }


        private void SetSelectedSortToState(string sort)
        {
            WBidState wBIdStateContent = GlobalSettings.WBidStateCollection.StateList.FirstOrDefault(x => x.StateName == GlobalSettings.WBidStateCollection.DefaultName);
            if (wBIdStateContent.BidAuto == null)
                wBIdStateContent.BidAuto = new BidAutomator();

            wBIdStateContent.BidAuto.BASort = new SortDetails();

            wBIdStateContent.BidAuto.BASort.SortColumn = sort;
        }

        private void SetBlockSortListToState()
        {
            WBidState  wBIdStateContent = GlobalSettings.WBidStateCollection.StateList.FirstOrDefault(x => x.StateName == GlobalSettings.WBidStateCollection.DefaultName);
            if (wBIdStateContent.BidAuto == null)
                wBIdStateContent.BidAuto = new BidAutomator();

            wBIdStateContent.BidAuto.BASort = new SortDetails();

            wBIdStateContent.BidAuto.BASort.SortColumn = "BlockSort";

            wBIdStateContent.BidAuto.BASort.BlokSort = new List<string>();
            var listStandardBlockSort = WBidCollection.GetStandardBlockSortListData();
            foreach (var item in listSortSelected)
            {
                var objSort = listStandardBlockSort.FirstOrDefault(x => x.Name == item);
                if (objSort != null)
                {
                    wBIdStateContent.BidAuto.BASort.BlokSort.Add(objSort.Id.ToString());
 
                }
                

            }




        }

        private void UpdateButtonUI(UIButton[] buttons, string methodSelect, bool isBlockSort)
        {
            foreach (UIButton button in buttons)
            {
                if (_buttonClicked)
                {
                    button.SetTitleColor(UIColor.Black, UIControlState.Normal);
                    button.BackgroundColor = Colors.BidRowGreen;
                    GoToSubSortView(false, new List<string>() { methodSelect });
                }
                else
                {
                    button.SetTitleColor(UIColor.Black, UIControlState.Normal);
                    button.BackgroundColor = Colors.BidOrange;
                }
            }
        }

        partial void OnSegSelectSortValueChange(Foundation.NSObject sender)
        {
            switch (sgSelectSort.SelectedSegment)
            {
                case 0:
                    if (swAdvance.On)
                    {
                        scrollAdvance.Alpha = 1;
                        viewSinglePay.Alpha = 0;
                        viewBlockSort.Alpha = 0;
                    }
                    else
                    {
                        scrollAdvance.Alpha = 0;
                        viewSinglePay.Alpha = 1;
                        viewBlockSort.Alpha = 0;
                    }
                    break;
                case 1:
                    scrollAdvance.Alpha = 0;
                    viewSinglePay.Alpha = 0;
                    viewBlockSort.Alpha = 1;
                    break;
            }
        }

        partial void OnSingleAdvanceChangeValue(Foundation.NSObject sender)
        {
            scrollAdvance.Alpha = 1;
            viewSinglePay.Alpha = 0;
            swAdvance.SetState(true, true);
        }

        partial void OnSwitchAdvanceChangeValue(Foundation.NSObject sender)
        {
            scrollAdvance.Alpha = 0;
            viewSinglePay.Alpha = 1;
            swSingleAdvance.SetState(false, true);
        }

        private void DisplayAlertView(string caption, string message)
        {
            new UIAlertView(caption, message, null, "OK", null).Show();

        }
    }
}
