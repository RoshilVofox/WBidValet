// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using StoreKit;
using SharedCode;
using System.Collections.Generic;
using System.Linq;
using Bidvalet.Model;
using System.IO;

namespace Bidvalet.iOS
{
    public partial class ExpiredViewController : BaseViewController
    {
        public static string oneMonthSubscription = "com.wbidvaletapp.oneMonthSubscription";
        LoadingOverlay ActivityIndicator;
        CustomPaymentObserver theObserver;
        InAppPurchaseManager iap;
        NSObject priceObserver, requestObserver, requestObserverObj, priceObserverObj;
        LoadingOverlay loadingOverlay;
        bool purchased;
        public ExpiredViewController(IntPtr handle)
            : base(handle)
        {
            iap = new InAppPurchaseManager();
            theObserver = new CustomPaymentObserver(iap);
            // Call this once upon startup of in-app-purchase activities
            // This also kicks off the TransactionObserver which handles the various communications
            SKPaymentQueue.DefaultQueue.AddTransactionObserver(theObserver);
        }
        public DateTime expiredTime;

        int typeOfInternetConnection;
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            ReloadData();

            ShowNavigationBar();
            Title = "Subscribe";
            UIHelpers.StyleForButtonPerMonth(btnPricePerMonth);
            loadingOverlay = new LoadingOverlay(View.Bounds, "Loading...");
            View.Add(loadingOverlay);

            lblSecondLine.Font = UIFont.FromName(lblSecondLine.Font.Name, 14f);
            lblSecondLine.TextAlignment = UITextAlignment.Left;
            lblThirdLine.Font = UIFont.FromName(lblThirdLine.Font.Name, 14f);
            lblThirdLine.TextAlignment = UITextAlignment.Left;
            lblFirstLine.Text = GlobalSettings.UserInfo.TopSubscriptionLine;
            lblSecondLine.Text = GlobalSettings.UserInfo.SecondSubscriptionLine;
            lblThirdLine.Text = GlobalSettings.UserInfo.ThirdSubscriptionLine;
            //btnPricePerMonth.Hidden = (GlobalSettings.UserInfo.IsMonthlySubscribed || GlobalSettings.UserInfo.IsYearlySubscribed);
			if (GlobalSettings.UserInfo.IsFree || ((GlobalSettings.UserInfo.IsMonthlySubscribed || GlobalSettings.UserInfo.IsYearlySubscribed) && ((GlobalSettings.UserInfo.PaidUntilDate ?? DateTime.MinValue).AddDays (10) >= DateTime.Now))) 
			{
				btnPricePerMonth.Hidden = true;
			}
            lblSubscriptionMessage.Hidden = btnPricePerMonth.Hidden;
            typeOfInternetConnection = InternetHelper.CheckInterNetConnection();
            SetUpSubscription();
            InvokeInBackground(() =>
            {
                GetUserDetais();

            });



            //PaymentUpdateModel paymentUpdateModel = new PaymentUpdateModel();
            //purchased = true;
            //paymentUpdateModel.AppNum = (int)AppNum.BidValet;
            //paymentUpdateModel.EmpNum = int.Parse(GlobalSettings.UserInfo.EmpNo);
            //paymentUpdateModel.Message = "PaymentReceived for Onetime Monthly";
            //paymentUpdateModel.TransactionNumber = "trans1";
            //paymentUpdateModel.Month = 1;

            //SaveOffLinePayment(paymentUpdateModel);

        }


        private void ReloadData()
        {
            NavigationItem.HidesBackButton = true;
            NavigationItem.LeftBarButtonItems = new UIBarButtonItem[]{
				new UIBarButtonItem ("< Back", UIBarButtonItemStyle.Plain,(sender,args) => {
                
                    //NSNotificationCenter.DefaultCenter.PostNotificationName("ReloadHomeView", null);
					NavigationController.PopViewController(true);
				}),
          };
        }


        private void UpdatePayment(string transactionId)
        {
            try
            {
                PaymentUpdateModel paymentUpdateModel = new PaymentUpdateModel();
                purchased = true;
                paymentUpdateModel.AppNum = (int)AppNum.BidValet;
                paymentUpdateModel.EmpNum = int.Parse(GlobalSettings.UserInfo.EmpNo);
                paymentUpdateModel.Message = "PaymentReceived for Onetime Monthly";
                paymentUpdateModel.TransactionNumber = transactionId;
                paymentUpdateModel.Month = 1;


                ServerUserInformation userInfo = RestHelper.UpdateAllPaidUntilDate(paymentUpdateModel);

                if (userInfo != null)
                {
                    GlobalSettings.UserInfo.PaidUntilDate = userInfo.WBExpirationDate;
                    GlobalSettings.UserInfo.IsFree = userInfo.IsFree;
                    GlobalSettings.UserInfo.IsMonthlySubscribed = userInfo.IsMonthlySubscribed;
                    GlobalSettings.UserInfo.IsYearlySubscribed = userInfo.IsYearlySubscribed;
					GlobalSettings.UserInfo.IsCBMonthlySubscribed = userInfo.IsCBMonthlySubscribed;
					GlobalSettings.UserInfo.IsCBYearlySubscribed = userInfo.IsCBYearlySubscribed;
                    GlobalSettings.UserInfo.TopSubscriptionLine = userInfo.TopSubscriptionLine;
                    GlobalSettings.UserInfo.SecondSubscriptionLine = userInfo.SecondSubscriptionLine;
                    GlobalSettings.UserInfo.ThirdSubscriptionLine = userInfo.ThirdSubscriptionLine;

                    InvokeOnMainThread(() =>
                    {

                        WBidHelper.SaveUserFile(GlobalSettings.UserInfo, WBidHelper.WBidUserFilePath);
                        GlobalSettings.UserInfo = (UserInformation)XmlHelper.DeserializeFromXml<UserInformation>(WBidHelper.WBidUserFilePath);
                        lblFirstLine.Text = GlobalSettings.UserInfo.TopSubscriptionLine;
                        lblSecondLine.Text = GlobalSettings.UserInfo.SecondSubscriptionLine;
                        lblThirdLine.Text = GlobalSettings.UserInfo.ThirdSubscriptionLine;
                        expiredTime = userInfo.WBExpirationDate ?? DateTime.MinValue;
                        GlobalSettings.IsNeedToReload = true;
                        loadingOverlay.Hide();
                    });
                }
                else
                {

                    InvokeOnMainThread(() =>
                 {
                     loadingOverlay.Hide();
                     SaveOffLinePayment(paymentUpdateModel);

                   string message="You have successfully completed an in-app purchase. Unfortunately, an error happened while updating the WBid database.  We will update the subscription details later.";

                   message += Environment.NewLine + "If you have any question with the subscription then please contact Admin.";

                  
							var alertView=		new UIAlertView(GlobalSettings.ApplicationName, message, null, "OK", null);
							alertView.Clicked+= AlertView_Clicked;
							alertView.Show();
							//DisplayAlertView(GlobalSettings.ApplicationName, message);

                 });
                }

            }
            catch (Exception ex)
            {

                InvokeOnMainThread(() =>
                {
                    throw ex;
                });
            }
        }

        void AlertView_Clicked (object sender, UIButtonEventArgs e)
        {
 		//	NavigationController.PopViewController(true);
			this.NavigationController.PopViewController (true);
        }


        private void SaveOffLinePayment(PaymentUpdateModel paymentUpdateModel)
        {
            paymentUpdateModel.Message = "PaymentReceived for Onetime Monthly-Offline";
            XmlHelper.SerializeToXml<PaymentUpdateModel>(paymentUpdateModel, WBidHelper.GetWBidOfflinePaymentFilePath());
 
        }

        private void GetUserDetais()
        {
            try
            {


                // typeOfInternetConnection = (int)InternetType.Air;
                //No internet connection
                if (typeOfInternetConnection == (int)InternetType.Ground || typeOfInternetConnection == (int)InternetType.AirPaid)
                {
                    ServerUserInformation userInfo = GetUserDetails();

                    if (userInfo != null)
                    {
                        GlobalSettings.UserInfo.PaidUntilDate = userInfo.WBExpirationDate;
                        GlobalSettings.UserInfo.IsFree = userInfo.IsFree;
                        GlobalSettings.UserInfo.IsMonthlySubscribed = userInfo.IsMonthlySubscribed;
                        GlobalSettings.UserInfo.IsYearlySubscribed = userInfo.IsYearlySubscribed;
						GlobalSettings.UserInfo.IsCBMonthlySubscribed = userInfo.IsCBMonthlySubscribed;
						GlobalSettings.UserInfo.IsCBYearlySubscribed = userInfo.IsCBYearlySubscribed;
                        GlobalSettings.UserInfo.TopSubscriptionLine = userInfo.TopSubscriptionLine;
                        GlobalSettings.UserInfo.SecondSubscriptionLine = userInfo.SecondSubscriptionLine;
                        GlobalSettings.UserInfo.ThirdSubscriptionLine = userInfo.ThirdSubscriptionLine;

                        InvokeOnMainThread(() =>
                        {

                            WBidHelper.SaveUserFile(GlobalSettings.UserInfo, WBidHelper.WBidUserFilePath);
                            GlobalSettings.UserInfo = (UserInformation)XmlHelper.DeserializeFromXml<UserInformation>(WBidHelper.WBidUserFilePath);
                            lblFirstLine.Text = GlobalSettings.UserInfo.TopSubscriptionLine;
                            lblSecondLine.Text = GlobalSettings.UserInfo.SecondSubscriptionLine;
                            lblThirdLine.Text = GlobalSettings.UserInfo.ThirdSubscriptionLine;
                           // btnPricePerMonth.Hidden = (GlobalSettings.UserInfo.IsMonthlySubscribed || GlobalSettings.UserInfo.IsYearlySubscribed);
								if (GlobalSettings.UserInfo.IsFree || ((GlobalSettings.UserInfo.IsMonthlySubscribed || GlobalSettings.UserInfo.IsYearlySubscribed)&&((GlobalSettings.UserInfo.PaidUntilDate?? DateTime.MinValue).AddDays(10)>=DateTime.Now))) 
								{
									btnPricePerMonth.Hidden = true;
								}

                            lblSubscriptionMessage.Hidden = btnPricePerMonth.Hidden;
                            expiredTime = userInfo.WBExpirationDate??DateTime.MinValue;

                            loadingOverlay.Hide();

                        });
                    }
                    else
                    {
                        InvokeOnMainThread(() =>
                  {
                      loadingOverlay.Hide();
                  });
                    }

                }
                else
                {
                    InvokeOnMainThread(() =>
                     {
                         loadingOverlay.Hide();
                     });
                }



            }
            catch (Exception ex)
            {
                InvokeOnMainThread(() =>
                                           {
                                               loadingOverlay.Hide();
                                           });
            }

        }

        private ServerUserInformation GetUserDetails()
        {

            ServerUserInformation userInfo = null;
            try
            {

                var url = GlobalSettings.WBidAuthenticationServiceUrl + "/GetAllUserAccountDetails/";
                url = url + GlobalSettings.UserInfo.EmpNo + "/" + (int)AppNum.BidValet + "/";
                userInfo = RestHelper.GetResponse<ServerUserInformation>(url);

            }
            catch (Exception ex)
            {
            }
            return userInfo;
        }

        partial void OnSubscriptionEvent(Foundation.NSObject sender)
        {


            if(File.Exists(WBidHelper.GetWBidOfflinePaymentFilePath()))
            {

                string message="It seems that You already purchased the subscription, but it is not updated  to database.";
                message+=Environment.NewLine +"If you have any question with the subscription then please contact Admin.";
                DisplayAlertView(GlobalSettings.ApplicationName, message);

                return;
            }

            // your logic here
            int typeOfInternetConnection = InternetHelper.CheckInterNetConnection();
            // typeOfInternetConnection = (int)InternetType.Air;

            if (typeOfInternetConnection == (int)InternetType.NoInternet)
            {
                InvokeOnMainThread(() =>
                {
                    //loadingOverlay.Hide ();
                    RedirectToMessageView((int)AuthStaus.VPSDownAlert);
                });
            }
            //Grount type internet
            else if (typeOfInternetConnection == (int)InternetType.Ground || typeOfInternetConnection == (int)InternetType.AirPaid)
            {

                SubscriptionProcess();

            }
            //Airtype internet
            else if (typeOfInternetConnection == (int)InternetType.Air)
            {
                DisplayAlertView(GlobalSettings.ApplicationName, "You are using the Free Wifi on the plane.  You cannot subscribe with iTunes while using the Free Wifi.  Please try again when you have established a good Wifi connection on the ground.");

            }

        }


        public override void ViewWillAppear(bool animated)
        {





        }
        public override void ViewWillDisappear(bool animated)
        {
            typeOfInternetConnection = InternetHelper.CheckInterNetConnection();
            // remove the observer when the view isn't visible
            if (typeOfInternetConnection == (int)InternetType.Ground || typeOfInternetConnection == (int)InternetType.AirPaid)
            {


                NSNotificationCenter.DefaultCenter.RemoveObserver(priceObserver);
                NSNotificationCenter.DefaultCenter.RemoveObserver(priceObserverObj);
                NSNotificationCenter.DefaultCenter.RemoveObserver(requestObserver);
                NSNotificationCenter.DefaultCenter.RemoveObserver(requestObserverObj);

            }

            base.ViewWillDisappear(animated);
        }

        private void SetUpSubscription()
        {



            if (typeOfInternetConnection == (int)InternetType.NoInternet)
            {


                //DisplayAlertView(GlobalSettings.ApplicationName, "No Internet Connection.");
                DisplayAlertView(GlobalSettings.ApplicationName, Constants.VPSDownAlert);

            }
            //Grount type internet
            else if (typeOfInternetConnection == (int)InternetType.Ground || typeOfInternetConnection == (int)InternetType.AirPaid)
            {

                initializeInAppPurchase();
                List<string> listProduct = new List<string>();
                listProduct.Add(oneMonthSubscription);

                iap.RequestProductData(listProduct);


            }
            //Airtype internet
            else if (typeOfInternetConnection == (int)InternetType.Air)
            {

                DisplayAlertView(GlobalSettings.ApplicationName, "You are using the Free Wifi on the plane.  You cannot subscribe with iTunes while using the Free Wifi.  Please try again when you have established a good Wifi connection on the ground.");

            }
        }

        private void DisplayAlertView(string caption, string message)
        {
            new UIAlertView(caption, message, null, "OK", null).Show();



        }

        private void RedirectToMessageView(int index)
        {
            AuthorizationTestCaseViewController testCaseViewController = Storyboard.InstantiateViewController("AuthorizationTestCaseViewController") as AuthorizationTestCaseViewController;
            testCaseViewController.messageError = Constants.ErrorMessages.ElementAt(index - 1);
            testCaseViewController.topBarTitle = Constants.listTitleTopBar.ElementAt(index - 1);
            PushViewController(testCaseViewController, true);
        }

        public void initializeInAppPurchase()
        {

            try
            {

                // setup the observer to wait for prices to come back from StoreKit <- AppStore
                priceObserver = NSNotificationCenter.DefaultCenter.AddObserver(InAppPurchaseManager.InAppPurchaseManagerProductsFetchedNotification,
                    (notification) =>
                    {
                        NSDictionary info = notification.UserInfo;
                        var NSOneMonthProductId = new NSString(oneMonthSubscription);


                        if (info == null)
                        {
                            // if info is null, probably NO valid prices returned, therefore it doesn't exist at all

                            return;
                        }

                        // we only update the button with a price if the user hasn't already purchased it
                        if (info.ContainsKey(NSOneMonthProductId))
                        {


                            var product = (SKProduct)info[NSOneMonthProductId];
                            //Print(product);
                            //var btnTitle = string.Format ("Buy { 0}", product.LocalizedPrice ());
                            btnPricePerMonth.SetTitle(product.LocalizedPrice() + " / Month", UIControlState.Normal);
                        }

                    });
                priceObserverObj = NSNotificationCenter.DefaultCenter.AddObserver(InAppPurchaseManager.InAppPurchaseManagerTransactionSucceededNotification,
                    (notification) =>
                    {
                        // update the buttons after a successful purchase
                        //ActivityIndicator.Hidden = true;
                        //ActivityIndicator.Hide();
                        SKPaymentTransaction sKPaymentTransaction = (SKPaymentTransaction)notification.UserInfo["transaction"];

                        if (!purchased)
                        {
                            InvokeOnMainThread(() =>
                              {
                                  loadingOverlay.updateLoadingText("Updating Payment Details");
                              });

                            InvokeInBackground(() =>
                            {
                                UpdatePayment(sKPaymentTransaction.TransactionIdentifier);
                            });
                        }
                        else
                        {
                            InvokeOnMainThread(() =>
                              {
                                  if (loadingOverlay != null)
                                      loadingOverlay.Hide();
                              });
                        }
                    });

                requestObserver = NSNotificationCenter.DefaultCenter.AddObserver(InAppPurchaseManager.InAppPurchaseManagerRequestFailedNotification,
                    (notification) =>
                    {
                        // TODO:
                        //ActivityIndicator.Hidden = true;
                        //ActivityIndicator.Hide();
                        //Console.WriteLine("Request Failed");
                        loadingOverlay.Hide();
                        //UIAlertView alert = new UIAlertView(GlobalSettings.ApplicationName, "Request failed", null, "OK", null);
                        //alert.Show();

                    });
                requestObserverObj = NSNotificationCenter.DefaultCenter.AddObserver(InAppPurchaseManager.InAppPurchaseManagerTransactionFailedNotification,
                    (notification) =>
                    {
                        // TODO:
                        //ActivityIndicator.Hidden = true;
                        //ActivityIndicator.Hide();
                        loadingOverlay.Hide();
                       // DisplayAlertView(GlobalSettings.ApplicationName, "Error while processing the request. Please try later.");
                        Console.WriteLine("Request Cancelled");

                    });
            }
            catch (Exception ex)
            {


            }


        }



       
        public void SubscriptionProcess()
        {
            //DateTime PaidUntilDate =  expiredTime ;
			purchased=false;
            int days = DaysBetween(DateTime.Now, expiredTime);
            if (days < 30)
            {
                // ActivityIndicator = new LoadingOverlay(View.Bounds, "Processing... \nPlease wait..");

                //this.View.Add(ActivityIndicator);
                loadingOverlay = new LoadingOverlay(View.Bounds, "Processing... \nPlease wait..");
                View.Add(loadingOverlay);
                iap.PurchaseProduct(oneMonthSubscription);
            }
            else
            {
                DisplayAlertView(GlobalSettings.ApplicationName, "Unable to purchase. There must be 30 or fewer days remaining on your subscription before renewals can be processed.");
            }
        }
        public static int DaysBetween(DateTime d1, DateTime d2)
        {
            TimeSpan span = d2.Subtract(d1);
            return (int)span.TotalDays;
        }

    }
}
