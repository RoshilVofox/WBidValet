// This file has been autogenerated from a class added in the UI designer.
#region NameSpace

using System;
using Foundation;
using UIKit;
using System.Linq;
using Bidvalet.Business;
using System.Collections.Generic;
using System.Drawing;
using System.Globalization;
using Xamarin;
#endregion

namespace Bidvalet.iOS
{
    public partial class CreateAccountTableViewController : UITableViewController
    {

        #region Public Variables
        public int EmpNumber { get; set; }
        public bool IsFoundAccount { get; set; }
        public bool IsFromMainView { get; set; }
        public UIViewController ParentController { get; set; }
        #endregion

        #region Private Variables

        private const int PILOT = 0;
        private const int FIT_ART = 1;
        private string Title_Pilot = "Pilot";
        private string Title_Fitart = "Fit Att";
        private string Title_Screen = "Edit and change account details as needed.";
        string _setCarrier = "Set Carrier";
        private LoadingOverlay _loadingOverlay;
        private UIActionSheet _actionSheet;
        private UserInformation _objUserInfo = new UserInformation();
        
        private string _password;

        #endregion


        public CreateAccountTableViewController(IntPtr handle)
            : base(handle)
        {
        }

        #region Events
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            btnCreate.Enabled = false;
            btnCreate.SetTitleColor(UIColor.LightGray, UIControlState.Disabled);

            SetUpValidations();


            tfFirstName.ShouldReturn += (textField) =>
            {
                textField.ResignFirstResponder();
                return true;
            };
            tfFirstName.EditingChanged += tfFirstName_EditingChanged;


            tfLastName.ShouldReturn += (textField) =>
            {
                textField.ResignFirstResponder();
                return true;
            };
            tfLastName.EditingChanged += tfLastName_EditingChanged;


            this.tfEmail.ShouldReturn += (textField) =>
            {
                textField.ResignFirstResponder();
                return true;
            };
            tfEmail.KeyboardType = UIKeyboardType.EmailAddress;
            tfEmail.EditingChanged += tfEmail_EditingChanged;

            tfEmailConfirm.ShouldReturn += (textField) =>
            {
                textField.ResignFirstResponder();
                return true;
            };

            tfEmailConfirm.KeyboardType = UIKeyboardType.EmailAddress;
            tfEmailConfirm.EditingChanged += tfEmailConfirm_EditingChanged;

            tfPassword.ShouldReturn += (textField) =>
            {
                textField.ResignFirstResponder();
                return true;
            };
            tfPassword.EditingChanged += tfPassword_EditingChanged;

            tfConfirmPass.ShouldReturn += (textField) =>
            {
                textField.ResignFirstResponder();
                return true;
            };

            tfConfirmPass.EditingChanged += tfConfirmPass_EditingChanged;


            var toolbar = new UIToolbar(new RectangleF(0.0f, 0.0f, 50.0f, 44.0f));
            var doneButton = new UIBarButtonItem(UIBarButtonSystemItem.Done, delegate
            {
                tfPhone.ResignFirstResponder();
            });

            toolbar.Items = new[] {
				new UIBarButtonItem (UIBarButtonSystemItem.FlexibleSpace),
				doneButton
			};
            tfPhone.InputAccessoryView = toolbar;

            tfPhone.EditingChanged += tfPhone_EditingChanged;

            // tfFirstName.AutocapitalizationType = UITextAutocapitalizationType.AllCharacters;

        }











        void tfFirstName_EditingChanged(object sender, EventArgs e)
        {
            tfFirstName.Text = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(tfFirstName.Text);
            // tfFirstName.AutocapitalizationType = UITextAutocapitalizationType.AllCharacters;

            if (!btnCreate.Enabled)
                SetCreateButtonState();

        }

        void tfLastName_EditingChanged(object sender, EventArgs e)
        {
            tfLastName.Text = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(tfLastName.Text);
            // tfFirstName.AutocapitalizationType = UITextAutocapitalizationType.AllCharacters;

            if (!btnCreate.Enabled)
                SetCreateButtonState();

        }

        void tfEmail_EditingChanged(object sender, EventArgs e)
        {
            if (!btnCreate.Enabled)
                SetCreateButtonState();

        }

        void tfEmailConfirm_EditingChanged(object sender, EventArgs e)
        {
            if (!btnCreate.Enabled)
                SetCreateButtonState();
        }

        void tfPassword_EditingChanged(object sender, EventArgs e)
        {
            if (!btnCreate.Enabled)
                SetCreateButtonState();
        }

        void tfConfirmPass_EditingChanged(object sender, EventArgs e)
        {
            if (!btnCreate.Enabled)
                SetCreateButtonState();
        }


        void tfPhone_EditingChanged(object sender, EventArgs e)
        {
            if (!btnCreate.Enabled)
                SetCreateButtonState();
        }

        private void SetCreateButtonState()
        {
            btnCreate.Enabled = true;
            btnCreate.SetTitleColor(UIColor.Black, UIControlState.Normal);
        }



        public override void ViewWillAppear(bool animated)
        {
            SetUpView();
            //TableView.Delegate = this;
        }

        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);
            //NavigationController.SetNavigationBarHidden (false, true);
        }

        /// <summary>
        /// On Cancel button on click
        /// </summary>
        /// <param name="sender">Sender.</param>
        partial void OnCancelClickEvent(Foundation.NSObject sender)
        {
            this.DismissViewController(true, null);
            //NavigationController.PopViewController (true);
        }

        /// <summary>
        /// On Set Carrier button click
        /// </summary>
        /// <param name="sender">Sender.</param>
        partial void OnSetCarrierButtonClickEvent(Foundation.NSObject sender)
        {
            ShowActionSheet();
        }


        void HandleActionSheetEvent(object sender, UIButtonEventArgs e)
        {
            if (e.ButtonIndex == 0)
            {
                _actionSheet.Dispose();
                return;
            }
            _setCarrier = Constants.ListCarrier.ElementAt((int)e.ButtonIndex - 1);
            Console.WriteLine(_setCarrier);
            btnSetCarrier.SetTitle(_setCarrier, UIControlState.Normal);
            SetCreateButtonState();
        }

        /// <summary>
        /// Create Button clicked
        /// </summary>
        /// <param name="sender">Sender.</param>
        partial void OnCreateButtonClickEvent(Foundation.NSObject sender)
        {
            bool status = SaveUserInfomationChanged();
            if (IsFoundAccount)
            {
                _loadingOverlay = new LoadingOverlay(View.Bounds, "Updating the changes\n Please wait..");
            }
            else
            {
                _password = tfPassword.Text;
                _loadingOverlay = new LoadingOverlay(View.Bounds, "Creating the account \n Please wait..");

            }

            if (status)
            {

                View.AddSubview(_loadingOverlay);

                InvokeInBackground(() =>
                {
                    //0--No internet , 1-- on ground  ,2--on AIr 
                    int typeOfInternetConnection = InternetHelper.CheckInterNetConnection();

                    //No internet connection
                    if (typeOfInternetConnection == (int)InternetType.NoInternet)
                    {

                        InvokeOnMainThread(() =>
                        {
                            _loadingOverlay.Hide();
                            RedirectToMessageView((int)AuthStaus.VPSDownAlert);
                        });
                    }
                    //Grount type internet
                    else if (typeOfInternetConnection == (int)InternetType.Ground)
                    {
                        if (IsFoundAccount)
                        {
                            UpdateUserDetails();
                        }
                        else
                        {
                            CreateUserAccount();
                        }



                    }
                    else if (typeOfInternetConnection == (int)InternetType.Air)
                    {
                        InvokeOnMainThread(() =>
                        {
                            _loadingOverlay.Hide();
                            RedirectToMessageView((int)AuthStaus.SouthWestConnectionAlert);
                        });

                    }
                });



                //			AuthorizationTestCaseViewController testCaseViewController = Storyboard.InstantiateViewController ("AuthorizationTestCaseViewController") as AuthorizationTestCaseViewController;
                //			testCaseViewController.messageError = Constants.ErrorMessages.ElementAt (13);
                //			testCaseViewController.topBarTitle = Constants.listTitleTopBar.ElementAt (13);
                //			testCaseViewController.buttonTitle = Constants.GO_TO_CONSTRAINTS;
                //			testCaseViewController.numberRow = Constants.CREATE_ACCOUNT;
                //			this.NavigationController.PushViewController (testCaseViewController, true);
            }
        }

        #endregion

        #region Private Methods
        /// <summary>
        /// Shows Set Carrier.
        /// </summary>
        void ShowActionSheet()
        {
            _actionSheet = new UIActionSheet("Select Carrier", null, Constants.CANCEL, null, null);
            int countTitle = Constants.ListCarrier.Count;
            for (int i = 0; i < countTitle; i++)
            {
                _actionSheet.AddButton(Constants.ListCarrier.ElementAt(i));
            }
            _actionSheet.Clicked += HandleActionSheetEvent;
            // show sheet
            _actionSheet.ShowInView(View);
        }

        void SetUpView()
        {
            //NavigationController.SetNavigationBarHidden (true, true);
            UIHelpers.StyleForButtonCancelCreateAccount(btnCancel);
            UIHelpers.StyleForButtonsCreateAccount(new UIButton[] { btnCreate, btnSetCarrier });
            if (IsFoundAccount)
            {
                ViewTermsAndCondition.Hidden = true;
                ViewPasswordConHeight.Constant = 0;
                ViewrePasswordConHeight.Constant = 0;
                this.View.UpdateConstraints();
                Title_Screen = Constants.LABEL_EDIT_ACCOUNT;

                btnCreate.SetTitle(Constants.LABEL_SAVE_CHANGE, UIControlState.Normal);
                _objUserInfo = SetUserDetails();
                PushUserInfoOnControl(_objUserInfo);
            }
            else
            {

                tfNumber.Text = EmpNumber.ToString(CultureInfo.InvariantCulture);
                Title_Screen = Constants.LABEL_CREATE_ACCOUNT;
                btnCreate.SetTitle(Constants.LABEL_CREATE, UIControlState.Normal);
                swAcceptTerm.On = false;
            }
            lbCheckAccountExits.Text = Title_Screen;
        }

        /// <summary>
        /// Creates the user account.
        /// </summary>
        private void CreateUserAccount()
        {
            try
            {

                //setting local value to Server user object.
                var objServerInfo = new ServerUserInformation
                {
                    EmpNum = EmpNumber,
                    Password = _password,
                    FirstName = _objUserInfo.FirstName,
                    LastName = _objUserInfo.LastName,
                    CellPhone = _objUserInfo.CellNumber,
                    CarrierNum = _objUserInfo.CellCarrier,
                    Email = _objUserInfo.Email,
                    Position = (_objUserInfo.Position == "FA") ? 3 : 4,
                    AcceptEmail = _objUserInfo.isAcceptMail,
                    AppNum = (int) AppNum.BidValet
                };

                // string test = ((AppNum)objServerInfo.AppNum).ToString();

                // Create account service call
                CustomServiceResponse customServiceResponse = RestHelper.CreateAllUser(objServerInfo);
                if (customServiceResponse != null)
                {
                    if (customServiceResponse.status)
                    {
                        //If service return true we need to create local account

                        var objLoacUser = new UserInformation
                        {
                            EmpNo = objServerInfo.EmpNum.ToString(CultureInfo.InvariantCulture),
                            CellCarrier = _objUserInfo.CellCarrier,
                            FirstName = _objUserInfo.FirstName,
                            LastName = _objUserInfo.LastName,
                            Position = _objUserInfo.Position,
                            Email = _objUserInfo.Email,
                            CellNumber = _objUserInfo.CellNumber,
                            isAcceptMail = _objUserInfo.isAcceptMail,
                            isAcceptUserTermsAndCondition = _objUserInfo.isAcceptUserTermsAndCondition,
                            PaidUntilDate = customServiceResponse.WBExpirationDate,
                            Domicile = GlobalSettings.Domicile
                        };
                        //Save   to local user file
                        WBidHelper.SaveUserFile(objLoacUser, WBidHelper.WBidUserFilePath);
                        GlobalSettings.UserInfo = XmlHelper.DeserializeFromXml<UserInformation>(WBidHelper.WBidUserFilePath);


                        InvokeOnMainThread(() =>
                        {
                            _loadingOverlay.Hide();


                            //try
                            //{
                            //    Insights.Identify(GlobalSettings.UserInfo.EmpNo, new Dictionary<string, string> { 
                            //    {Insights.Traits.Email, GlobalSettings.UserInfo.Email},
                            //    {Insights.Traits.Name, GlobalSettings.UserInfo.FirstName+" "+GlobalSettings.UserInfo.LastName},
                            //    {Insights.Traits.Description, "Account Created"}
               
                            //         });
                            //}
                            //catch (Exception)
                            //{


                            //}


                         

                            var alertVW = new UIAlertView(GlobalSettings.ApplicationName, "Welcome! Your account is free for the month. ", null, "OK", null);

                            alertVW.Clicked += (object sender, UIButtonEventArgs e) =>
                            {
                                if (ParentController != null)
                                {
                                    ((LoginViewController)ParentController).DismissEditAndNavigateToDownload(this);
                                }
                            };
                            alertVW.Show();
                        });

                        //Redirecting to download view
                        //RedirectTodownloadView();
                        //((LoginViewController)this.ParentViewController).DismissEditAndNavigateToDownload(this);

                    }
                    else
                    {
                        DisplayAlertView(GlobalSettings.ApplicationName, "Create Account Failed. Please try again.");
                    }
                }
                else
                {
                    DisplayAlertView(GlobalSettings.ApplicationName, "Error. Please try again.");

                }

            }
            catch (Exception)
            {
                DisplayAlertView(GlobalSettings.ApplicationName, "Error. Please try again.");
            }
        }

        private void UpdateUserDetails()
        {
            try
            {

                ServerUserInformation objServerInfo = GetUserDetails();
                if (objServerInfo != null)
                {
                    //Map the server object to local object
                    UserInformation objServerUser = MapServerUserObjectToLocal(objServerInfo);

                    //updating the local value to state object
                    GlobalSettings.UserInfo.CellCarrier = _objUserInfo.CellCarrier;
                    GlobalSettings.UserInfo.FirstName = _objUserInfo.FirstName;
                    GlobalSettings.UserInfo.LastName = _objUserInfo.LastName;
                    GlobalSettings.UserInfo.Position = _objUserInfo.Position;
                    GlobalSettings.UserInfo.Email = _objUserInfo.Email;
                    GlobalSettings.UserInfo.CellNumber = _objUserInfo.CellNumber;

                    GlobalSettings.UserInfo.PaidUntilDate = objServerUser.PaidUntilDate;
                    GlobalSettings.UserInfo.IsFree = objServerUser.IsFree;
                    GlobalSettings.UserInfo.IsMonthlySubscribed = objServerUser.IsMonthlySubscribed;
                    GlobalSettings.UserInfo.IsYearlySubscribed = objServerUser.IsYearlySubscribed;
					GlobalSettings.UserInfo.IsCBMonthlySubscribed = objServerUser.IsCBMonthlySubscribed;
					GlobalSettings.UserInfo.IsCBYearlySubscribed = objServerUser.IsCBYearlySubscribed;
                    GlobalSettings.UserInfo.TopSubscriptionLine = objServerUser.TopSubscriptionLine;
                    GlobalSettings.UserInfo.SecondSubscriptionLine = objServerUser.SecondSubscriptionLine;
                    GlobalSettings.UserInfo.ThirdSubscriptionLine = objServerUser.ThirdSubscriptionLine;

                    bool isContentModified = CheckProfileModified(GlobalSettings.UserInfo, objServerUser);
                    bool isACceptMailChanged = GlobalSettings.UserInfo.isAcceptMail != _objUserInfo.isAcceptMail;
                    bool isAcceptTerms = GlobalSettings.UserInfo.isAcceptUserTermsAndCondition != _objUserInfo.isAcceptUserTermsAndCondition;
                    GlobalSettings.UserInfo.isAcceptMail = _objUserInfo.isAcceptMail;
                    GlobalSettings.UserInfo.isAcceptUserTermsAndCondition = _objUserInfo.isAcceptUserTermsAndCondition;
                    if (isContentModified)
                    {
                        List<KeyValuePair<string, string>> differenceList = GenerateDifferentList(GlobalSettings.UserInfo, objServerUser);

                        InvokeOnMainThread(() =>
                        {
                            _loadingOverlay.Hide();
                            RedirectUserDifferenceScreen(differenceList);
                        });

                        //this.NavigationController.PopToRootViewController
                        //RedirectTo compare view
                        //Need to update the data to server

                    }
                    else if (isACceptMailChanged)
                    {

                        var objSUserInformation = new ServerUserInformation
                        {
                            EmpNum =
                                int.Parse(GlobalSettings.UserInfo.EmpNo.ToLower().Replace("x", "").Replace("e", "")),
                            FirstName = GlobalSettings.UserInfo.FirstName,
                            LastName = GlobalSettings.UserInfo.LastName,
                            Position = (GlobalSettings.UserInfo.Position == "FA") ? 3 : 4,
                            Email = GlobalSettings.UserInfo.Email,
                            CellPhone = GlobalSettings.UserInfo.CellNumber,
                            CarrierNum = GlobalSettings.UserInfo.CellCarrier,
                            AcceptEmail = GlobalSettings.UserInfo.isAcceptMail,
                            AppNum = (int) AppNum.BidValet
                        };
                        CustomServiceResponse customServiceResponse = RestHelper.UpdateAllUserDetails(objSUserInformation);
                        if (customServiceResponse != null)
                        {
                            if (customServiceResponse.status)
                            {
                                //Save INI file
                                WBidHelper.SaveUserFile(GlobalSettings.UserInfo, WBidHelper.WBidUserFilePath);
                                GlobalSettings.UserInfo = XmlHelper.DeserializeFromXml<UserInformation>(WBidHelper.WBidUserFilePath);


                                if (IsFromMainView)
                                {
                                    InvokeOnMainThread(() =>
                                    {
                                        _loadingOverlay.Hide();
                                        NavigationController.PopViewController(true);
                                    });

                                }
                                else
                                {
                                    //this.ParentViewController.GetType();

                                    InvokeOnMainThread(() =>
                                    {
                                        _loadingOverlay.Hide();
                                        if (ParentController != null)
                                        {
                                            ((LoginViewController)ParentController).DismissEditAndNavigateToDownload(this);
                                        }
                                    });
                                }

                                //
                            }
                            else
                            {
                                InvokeOnMainThread(() =>
                                {
                                    _loadingOverlay.Hide();
                                    DisplayAlertView(GlobalSettings.ApplicationName, "Update Account  Failed. Please try again.");
                                });
                            }
                        }
                        else
                        {
                            InvokeOnMainThread(() =>
                            {
                                _loadingOverlay.Hide();
                                DisplayAlertView(GlobalSettings.ApplicationName, "Please try again.");
                            });

                        }

                       
                    }
                    else
                    {

                        if (isAcceptTerms)
                        {
                            //Save INI file
                            WBidHelper.SaveUserFile(GlobalSettings.UserInfo, WBidHelper.WBidUserFilePath);
                            GlobalSettings.UserInfo = XmlHelper.DeserializeFromXml<UserInformation>(WBidHelper.WBidUserFilePath);


                        }

                        if (IsFromMainView)
                        {

                            InvokeOnMainThread(() =>
                            {
                                _loadingOverlay.Hide();
                                var alert = new UIAlertView(GlobalSettings.ApplicationName, "Successfully Updated", null, "OK", null);
                                alert.Clicked += (senderobj, e) => DismissViewController(true, null);
                                alert.Show();
                            });

                        }
                        else
                        {
                            //this.pa
                            //RedirectTodownloadView();
                            InvokeOnMainThread(() =>
                            {
                                _loadingOverlay.Hide();
                                if (ParentController != null)
                                {
                                    ((LoginViewController)ParentController).DismissEditAndNavigateToDownload(this);
                                }
                            });
                        }
                        //RedirectTo Download view
                    }

                }
            }
            catch (Exception)
            {
                InvokeOnMainThread(() =>
                {
                    _loadingOverlay.Hide();
                    DisplayAlertView(GlobalSettings.ApplicationName, "Error. Please try again.");
                });
            }

        }


        public void DismissEditAndNavigateToAccount(UserAccountDifferenceScreen objUserDifference)
        {
            if (objUserDifference == null) throw new ArgumentNullException("objUserDifference");
            objUserDifference.DismissViewController(true, null);

            if (ParentController != null)
            {
                ((LoginViewController)ParentController).DismissEditAndNavigateToDownload(this);
            }

        }

        private UserInformation MapServerUserObjectToLocal(ServerUserInformation serverInfo)
        {
            var serverUser = new UserInformation
            {
                //BidBase=serverInfo.BidBase,
                //BidSeat=serverInfo.BidSeat,
                CellCarrier = serverInfo.CarrierNum,
                CellNumber = serverInfo.CellPhone,
                //Domicile= serverInfo.BidBase,
                Email = serverInfo.Email,
                EmpNo = serverInfo.EmpNum.ToString(CultureInfo.InvariantCulture),
                FirstName = serverInfo.FirstName,
                LastName = serverInfo.LastName,
                isAcceptMail = serverInfo.AcceptEmail,
                PaidUntilDate = serverInfo.WBExpirationDate,
                Position = (serverInfo.Position == 3) ? "Flt Att" : "Pilot",
                UserAccountDateTime = serverInfo.UserAccountDateTime ?? DateTime.MinValue,


                IsFree = serverInfo.IsFree,
                IsMonthlySubscribed = serverInfo.IsMonthlySubscribed,
                IsYearlySubscribed = serverInfo.IsYearlySubscribed,
				IsCBMonthlySubscribed = serverInfo.IsCBMonthlySubscribed,
				IsCBYearlySubscribed = serverInfo.IsCBYearlySubscribed,
                TopSubscriptionLine = serverInfo.TopSubscriptionLine,
                SecondSubscriptionLine = serverInfo.SecondSubscriptionLine,
                ThirdSubscriptionLine = serverInfo.ThirdSubscriptionLine
                //IsFemale=
                //isAcceptUserTermsAndCondition


            };

            return serverUser;
        }

        private bool CheckProfileModified(UserInformation localInfo, UserInformation serverInfo)
        {
            bool status = (localInfo.FirstName != serverInfo.FirstName) || (localInfo.LastName != serverInfo.LastName)
                          || (localInfo.CellCarrier != serverInfo.CellCarrier) || (localInfo.CellNumber != serverInfo.CellNumber)
                          || (localInfo.Email != serverInfo.Email) || (localInfo.Position != serverInfo.Position);
            return status;
        }


        //[Export("textFieldDidBeginEditing:")]
        //public void TextFieldDidBeginEditing(UITextField textField)
        //{
        //    UIHelpers.MoveViewUpDown(this.View, -100, () =>
        //    {
        //        //					TableView.ScrollToRow(NSIndexPath.FromRowSection(0,0),UITableViewScrollPosition.None,true);
        //    });
        //}

        //[Export("textFieldShouldReturn:")]
        //public bool TextFieldShouldReturn(UITextField tf)
        //{
        //    UIHelpers.MoveViewUpDown(this.View, 0, () =>
        //    {
        //    });
        //    View.EndEditing(true);
        //    return true;
        //}

        partial void OnSwitchAcceptEmailChangeValue(Foundation.NSObject sender)
        {
            //Console.WriteLine("OnSwitchAcceptEmailChangeValue");
            _objUserInfo.isAcceptMail = swAcceptEmail.On;
            SetCreateButtonState();
        }

        partial void OnSwitchAcceptTermChangeValue(Foundation.NSObject sender)
        {
            //Console.WriteLine("OnSwitchAcceptTermChangeValue");
            _objUserInfo.isAcceptUserTermsAndCondition = swAcceptTerm.On;

            SetCreateButtonState();
        }

        partial void OnSegmentUserPositionChangeValue(Foundation.NSObject sender)
        {
            //Console.WriteLine("OnSegmentUserPositionChangeValue");
            switch (segUserPosition.SelectedSegment)
            {
                case PILOT:
                    _objUserInfo.Position = Title_Pilot;
                    break;
                case FIT_ART:
                    _objUserInfo.Position = Title_Fitart;
                    break;
            }
            SetCreateButtonState();
        }

        //set up default user information
        private UserInformation DefaultUserInformation()
        {
            var user = new UserInformation();
            user.FirstName = "Thang";
            user.LastName = "Pham";
            user.EmpNo = "1233456";
            user.Domicile = "Domicile";
            user.Position = "Fit Art";//Pilot or Fit Art
            user.SeniorityNumber = 1;
            user.Email = "phamthangnd@gmail.com";
            user.CellNumber = "0987654321";
            //user.CellCarrier = "T-Mobile";
            //user.Password = "123456789";
            user.isAcceptMail = true;
            user.isAcceptUserTermsAndCondition = false;
            return user;
        }

        private UserInformation SetUserDetails()
        {
            EmpNumber = int.Parse(GlobalSettings.UserInfo.EmpNo);
            UserInformation user = GlobalSettings.UserInfo;

            if (GlobalSettings.UserInfo != null)
            {
                user = new UserInformation
                {
                    FirstName = GlobalSettings.UserInfo.FirstName,
                    LastName = GlobalSettings.UserInfo.LastName,
                    EmpNo = GlobalSettings.UserInfo.EmpNo,
                    Domicile = GlobalSettings.UserInfo.Domicile,
                    Position = GlobalSettings.UserInfo.Position,//					FirstName = GlobalSettings.UserInfo.FirstName,
                    SeniorityNumber = GlobalSettings.UserInfo.SeniorityNumber == 0 ? 1 : GlobalSettings.UserInfo.SeniorityNumber,
                    Email = GlobalSettings.UserInfo.Email,
                    CellNumber = GlobalSettings.UserInfo.CellNumber,
                    CellCarrier = GlobalSettings.UserInfo.CellCarrier,
                    isAcceptMail = GlobalSettings.UserInfo.isAcceptMail,
                    isAcceptUserTermsAndCondition = GlobalSettings.UserInfo.isAcceptUserTermsAndCondition,



                };
            }
            return user;

        }
        //publish on controll
        private void PushUserInfoOnControl(UserInformation user)
        {

            int index = user.CellCarrier - 1;
            if (index < 0)
                index = 0;
            _setCarrier = Constants.ListCarrier[index];
            btnSetCarrier.SetTitle(_setCarrier, UIControlState.Normal);

            lbCheckAccountExits.Text = "Edit and change account details as needed.";
            //tfConfirmPass.Text = user.Password;
            tfEmail.Text = user.Email;
            tfEmailConfirm.Text = user.Email;
            tfFirstName.Text = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(user.FirstName);
            tfLastName.Text = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(user.LastName);
            tfNumber.Text = user.EmpNo;
            //tfPassword.Text = user.Password;
            tfPhone.Text = user.CellNumber;
            swAcceptEmail.On = user.isAcceptMail;
            swAcceptTerm.On = user.isAcceptUserTermsAndCondition;
            segUserPosition.SelectedSegment = user.Position.Equals(Title_Pilot) ? PILOT : FIT_ART;
        }
        // save user after change
        private bool SaveUserInfomationChanged()
        {
            //tfNumber.BecomeFirstResponder()

            bool status = ValidateControls();
            if (status)
            {
                _objUserInfo.FirstName = tfFirstName.Text;
                _objUserInfo.LastName = tfLastName.Text;
                _objUserInfo.EmpNo = tfNumber.Text;

                _objUserInfo.SeniorityNumber = 1;
                _objUserInfo.Email = tfEmail.Text;
                _objUserInfo.CellNumber = tfPhone.Text;

                var carr = Constants.ListCarrier.FindIndex(x => x == _setCarrier);
                carr = carr + 1;
                if (carr < -1)
                    carr = 1;

                _objUserInfo.CellCarrier = carr;
                //userInfo.Password = tfPassword.Text;
                _objUserInfo.Position = segUserPosition.SelectedSegment == 0 ? Title_Pilot : Title_Fitart;
                //if (swAcceptTerm.On)
                //{
                //    _objUserInfo.isAcceptUserTermsAndCondition = true;
                //}
                //else
                //{
                //    _objUserInfo.isAcceptUserTermsAndCondition = false;
                //}
                _objUserInfo.isAcceptUserTermsAndCondition = swAcceptTerm.On;
                //if (swAcceptEmail.On)
                //{
                //    _objUserInfo.isAcceptMail = true;
                //}
                //else
                //{
                //    _objUserInfo.isAcceptMail = false;
                //}
                _objUserInfo.isAcceptMail = swAcceptEmail.On;

                _objUserInfo.Email = tfEmail.Text;

                if (!IsFoundAccount)
                {
                    _objUserInfo.isAcceptUserTermsAndCondition = swAcceptTerm.On;
                }
            }
            return status;
        }

        private bool ValidateControls()
        {
            bool status;
            if (IsFoundAccount)
            {
                status = UIHelpers.validatorInputField(this, new UITextField[] {
					tfFirstName,
					tfLastName,
					tfEmail,
					tfEmailConfirm,
					tfPhone
				}, new string[]{
					"First Name",
					"Last Name",
					"Email",
					"Email Confirmation",
					"Cell Phone"
				}

                );

            }
            else
            {
                status = UIHelpers.validatorInputField(this, new UITextField[] {
					tfFirstName,
					tfLastName,
					tfEmail,
					tfEmailConfirm,
					tfPhone,
					tfPassword,
					tfConfirmPass
				}, new string[]{
					"First Name",
					"Last Name",
					"Email",
					"Email Confirmation",
					"Cell Phone",
					"Password",
					"Confirm Password"
				});

            }

            if (!status)
            {

                return false;
            }

            if (!ValidationHelper.EmailValidation(tfEmail.Text))
            {
                DisplayAlertView(GlobalSettings.ApplicationName, "Invalid Email");
                tfEmail.BecomeFirstResponder();
                return false;
            }
            if (!ValidationHelper.EmailValidation(tfEmailConfirm.Text))
            {
                DisplayAlertView(GlobalSettings.ApplicationName, "Invalid Confirm Email");
                tfEmail.BecomeFirstResponder();
                return false;
            }

            if (tfEmail.Text != tfEmailConfirm.Text)
            {
                DisplayAlertView(GlobalSettings.ApplicationName, "Email and Email Confirmation should be same");
                tfEmail.BecomeFirstResponder();
                return false;
            }




            if (_setCarrier.Equals("") || _setCarrier == "Set Carrier")
            {
                UIAlertController okAlertController = UIAlertController.Create("", "Select Carrier", UIAlertControllerStyle.Alert);
                okAlertController.AddAction(UIAlertAction.Create("OK", UIAlertActionStyle.Default, null));
                PresentViewController(okAlertController, true, null);
                return false;
            }

            int cellNumberLength = CheckMobileNumberLength(tfPhone.Text);

            if ((cellNumberLength < 10))
            {
                DisplayAlertView(GlobalSettings.ApplicationName, "Invalid cell number, Please enter cell number in xxx-xxx-xxxx format");
                tfPhone.BecomeFirstResponder();
                return false;

            }

            if (!IsFoundAccount)
            {
                if (tfPassword.Text != tfConfirmPass.Text)
                {
                    DisplayAlertView(GlobalSettings.ApplicationName, "Password and  Confirmation Password should be same");
                    tfPassword.BecomeFirstResponder();
                    return false;
                }

                if (!swAcceptTerm.On)
                {
                    DisplayAlertView(GlobalSettings.ApplicationName, "Please accept terms and condition");

                    return false;
                }
            }

            return true;

        }

        private ServerUserInformation GetUserDetails()
        {

            ServerUserInformation userInfo = null;
            try
            {

                var url = GlobalSettings.WBidAuthenticationServiceUrl + "/GetAllUserAccountDetails/";
                url = url + EmpNumber + "/" + (int)AppNum.BidValet + "/";
                userInfo = RestHelper.GetResponse<ServerUserInformation>(url);

            }
            catch (Exception ex)
            {
            }
            return userInfo;
        }

        private void SetUpValidations()
        {
            tfNumber.Enabled = false;
            tfPhone.ShouldChangeCharacters = (textField, range, replacement) =>
            {
                var newContent = new NSString(textField.Text).Replace(range, new NSString(replacement)).ToString();
                int number;

                if (!(replacement.Length == 0 || int.TryParse(replacement, out number)))
                {
                    return false;
                }
                int length = CheckMobileNumberLength(textField.Text.ToString(CultureInfo.InvariantCulture));

                if (length == 10)
                {
                    if (range.Length == 0)
                        return false;
                }

                if (length == 3)
                {
                    string formatnumber = NumberFormat(textField.Text);
                    textField.Text = formatnumber + "-";
                    if (range.Length > 0)
                    {
                        textField.Text = formatnumber.Substring(0, 3);
                    }
                }
                else if (length == 6)
                {
                    string formatnumber = NumberFormat(textField.Text);
                    Console.WriteLine(formatnumber.Substring(0, 3));
                    Console.WriteLine(formatnumber.Substring(3, 3));
                    textField.Text = formatnumber.Substring(0, 3) + "-" + formatnumber.Substring(3, 3) + "-";

                    if (range.Length > 0)
                    {
                        textField.Text = formatnumber.Substring(0, 3) + "-" + formatnumber.Substring(3, formatnumber.Length - 3);
                    }

                }
                return true;
            };
        }

        int CheckMobileNumberLength(string number)
        {
            number = number.Replace("(", "");
            number = number.Replace(")", "");
            number = number.Replace(" ", "");
            number = number.Replace("-", "");
            number = number.Replace("+", "");
            int length = number.Length;
            return length;
        }

        string NumberFormat(string number)
        {
            number = number.Replace("(", "");
            number = number.Replace(")", "");
            number = number.Replace(" ", "");
            number = number.Replace("-", "");
            number = number.Replace("+", "");
            int length = number.Length;

            if (length > 10)
            {
                number = number.Substring(length + 1 - 10);
            }
            return number;
        }

        /// <summary>
        /// Generate Different list
        /// </summary>
        /// <param name="local"></param>
        /// <param name="server"></param>
        /// <returns></returns>
        private List<KeyValuePair<string, string>> GenerateDifferentList(UserInformation local, UserInformation server)
        {
            var tempList = new List<KeyValuePair<string, string>>();

            if (local.FirstName != server.FirstName)
                tempList.Add(new KeyValuePair<string, string>("FirstName", local.FirstName + "," + server.FirstName));

            if (local.LastName != server.LastName)
                tempList.Add(new KeyValuePair<string, string>("LastName", local.LastName + "," + server.LastName));


            if (local.EmpNo != server.EmpNo)
                tempList.Add(new KeyValuePair<string, string>("EmployeeNumber", local.EmpNo + "," + server.EmpNo));

            if (local.Position != server.Position)
                tempList.Add(new KeyValuePair<string, string>("Position", local.Position + "," + server.Position));

            if (local.Email != server.Email)
                tempList.Add(new KeyValuePair<string, string>("Email", local.Email + "," + server.Email));


            if (local.CellNumber != server.CellNumber)
                tempList.Add(new KeyValuePair<string, string>("CellNumber", local.CellNumber + "," + server.CellNumber));

            if (local.CellCarrier != server.CellCarrier)
            {
                int index = server.CellCarrier;
                index = index - 1;
                if (index < 0)
                    index = 0;

                int locindex = local.CellCarrier;
                locindex = locindex - 1;
                if (locindex < 0)
                    locindex = 0;


                tempList.Add(new KeyValuePair<string, string>("CellCarrier", Constants.ListCarrier[locindex] + "," + Constants.ListCarrier[index]));

            }


            return tempList;
        }

        #region Navigation Methods
        /// <summary>
        /// Redirect to message view
        /// </summary>
        /// <param name="index"></param>
        private void RedirectToMessageView(int index)
        {
            var testCaseViewController = Storyboard.InstantiateViewController("AuthorizationTestCaseViewController") as AuthorizationTestCaseViewController;
            if (testCaseViewController != null)
            {
                testCaseViewController.messageError = Constants.ErrorMessages.ElementAt(index - 1);
                testCaseViewController.topBarTitle = Constants.listTitleTopBar.ElementAt(index - 1);


                testCaseViewController.numberRow = index;
                if (index == Constants.EXPIRED_SUBSCRIPTION)
                {
                    testCaseViewController.isShowPurchaseButton = true;
                }
                if (index == Constants.NEW_CB_WB_USER || index == Constants.VALID_SUBSCRIPTION)
                {
                    testCaseViewController.buttonTitle = Constants.GO_TO_CONSTRAINTS;
                }

                NavigationController.PushViewController(testCaseViewController, true);
            }
        }

        /// <summary>
        /// Redirect User difference screen
        /// </summary>
        /// <param name="differenceList"></param>
        private void RedirectUserDifferenceScreen(List<KeyValuePair<string, string>> differenceList)
        {
            var objUserDifference = Storyboard.InstantiateViewController("UserAccountDifferenceScreen") as UserAccountDifferenceScreen;

            if (objUserDifference != null)
            {
                objUserDifference.DifferenceList = differenceList;
                objUserDifference.IsFromMainView = IsFromMainView;
                objUserDifference.ParentController = this;
                // this.NavigationController.NavigationItem.HidesBackButton = false;
                PresentViewController(objUserDifference, true, null);
            }
        }
        partial void LicenseAndPrivacyPolicyClicked(NSObject sender)
        {
            var btn = (UIButton)sender;

            var webViewController = new WebViewForLicence();


            if (btn.Tag == 20)
            {
                webViewController.isLicence = false;
				webViewController.ViewType = WebViewForLicence.WebType.Policy;

            }
            else if (btn.Tag == 21)
            {
                webViewController.isLicence = true;
				webViewController.ViewType = WebViewForLicence.WebType.Licence;
            }

            //webViewController.ModalPresentationStyle= UIModalPresentationStyle.FormSheet;
            PresentViewController(webViewController, true, null);

        }
        /// <summary>
        /// Redirect to Download View
        /// </summary>
        private void RedirectToDownloadView()
        {
            var objDownloadData = Storyboard.InstantiateViewController("DownloadBidDataViewController") as DownloadBidDataViewController;
            if (NavigationController != null) NavigationController.NavigationItem.HidesBackButton = false;
            PresentViewController(objDownloadData, true, null);

        }
        #endregion

        #region Display Alert View
        /// <summary>
        /// Display Message box
        /// </summary>
        /// <param name="caption"></param>
        /// <param name="message"></param>
        private void DisplayAlertView(string caption, String message)
        {
            new UIAlertView(caption, message, null, "OK", null).Show();

        }
        #endregion

        #endregion
    }

}
