//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by SlSvcUtil, version 5.0.61118.0
// 
namespace WBidPushService.Model
{
    using System.Runtime.Serialization;


    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "PushDeviceDetails", Namespace = "http://schemas.datacontract.org/2004/07/WBidPushService.Model")]
    public partial class PushDeviceDetails : object
    {

        private int BadgeCountField;

        private System.Guid DeviceIdField;

        private string DeviceTockenField;

        private string DeviceTypeField;

        private int EmpNoField;

        private int FromAppNumberField;

        private bool IsActiveField;

        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BadgeCount
        {
            get
            {
                return this.BadgeCountField;
            }
            set
            {
                this.BadgeCountField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid DeviceId
        {
            get
            {
                return this.DeviceIdField;
            }
            set
            {
                this.DeviceIdField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceTocken
        {
            get
            {
                return this.DeviceTockenField;
            }
            set
            {
                this.DeviceTockenField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceType
        {
            get
            {
                return this.DeviceTypeField;
            }
            set
            {
                this.DeviceTypeField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EmpNo
        {
            get
            {
                return this.EmpNoField;
            }
            set
            {
                this.EmpNoField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FromAppNumber
        {
            get
            {
                return this.FromAppNumberField;
            }
            set
            {
                this.FromAppNumberField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive
        {
            get
            {
                return this.IsActiveField;
            }
            set
            {
                this.IsActiveField = value;
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "ResetBadgeParam", Namespace = "http://schemas.datacontract.org/2004/07/WBidPushService.Model")]
    public partial class ResetBadgeParam : object
    {

        private int FromAppNumberField;

        private System.Guid deviceIdField;

        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FromAppNumber
        {
            get
            {
                return this.FromAppNumberField;
            }
            set
            {
                this.FromAppNumberField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid deviceId
        {
            get
            {
                return this.deviceIdField;
            }
            set
            {
                this.deviceIdField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName = "IWBidPushSerivce")]
public interface IWBidPushSerivce
{

    [System.ServiceModel.OperationContractAttribute(AsyncPattern = true, Action = "http://tempuri.org/IWBidPushSerivce/RegistorDevices", ReplyAction = "http://tempuri.org/IWBidPushSerivce/RegistorDevicesResponse")]
    System.IAsyncResult BeginRegistorDevices(WBidPushService.Model.PushDeviceDetails pushDeviceDetails, System.AsyncCallback callback, object asyncState);

    int EndRegistorDevices(System.IAsyncResult result);

    [System.ServiceModel.OperationContractAttribute(AsyncPattern = true, Action = "http://tempuri.org/IWBidPushSerivce/RegisterDevicesForPushNotiifcation", ReplyAction = "http://tempuri.org/IWBidPushSerivce/RegisterDevicesForPushNotiifcationResponse")]
    System.IAsyncResult BeginRegisterDevicesForPushNotiifcation(WBidPushService.Model.PushDeviceDetails pushDeviceDetails, System.AsyncCallback callback, object asyncState);

    int EndRegisterDevicesForPushNotiifcation(System.IAsyncResult result);

    [System.ServiceModel.OperationContractAttribute(AsyncPattern = true, Action = "http://tempuri.org/IWBidPushSerivce/ResetBadge", ReplyAction = "http://tempuri.org/IWBidPushSerivce/ResetBadgeResponse")]
    System.IAsyncResult BeginResetBadge(System.Guid deviceId, System.AsyncCallback callback, object asyncState);

    int EndResetBadge(System.IAsyncResult result);

    [System.ServiceModel.OperationContractAttribute(AsyncPattern = true, Action = "http://tempuri.org/IWBidPushSerivce/ResetPushBadge", ReplyAction = "http://tempuri.org/IWBidPushSerivce/ResetPushBadgeResponse")]
    System.IAsyncResult BeginResetPushBadge(WBidPushService.Model.ResetBadgeParam resetbadgeParam, System.AsyncCallback callback, object asyncState);

    int EndResetPushBadge(System.IAsyncResult result);

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, AsyncPattern = true, Action = "http://tempuri.org/IWBidPushSerivce/PushMessage")]
    System.IAsyncResult BeginPushMessage(long pushmessageId, System.AsyncCallback callback, object asyncState);

    void EndPushMessage(System.IAsyncResult result);

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, AsyncPattern = true, Action = "http://tempuri.org/IWBidPushSerivce/PushMessageWithFromApp")]
    System.IAsyncResult BeginPushMessageWithFromApp(long pushmessageId, int[] fromApps, System.AsyncCallback callback, object asyncState);

    void EndPushMessageWithFromApp(System.IAsyncResult result);

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, AsyncPattern = true, Action = "http://tempuri.org/IWBidPushSerivce/PushMessageManually")]
    System.IAsyncResult BeginPushMessageManually(string message, int position, int device, int[] fromapps, System.AsyncCallback callback, object asyncState);

    void EndPushMessageManually(System.IAsyncResult result);

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, AsyncPattern = true, Action = "http://tempuri.org/IWBidPushSerivce/PushMessageForSelectedUsers")]
    System.IAsyncResult BeginPushMessageForSelectedUsers(string message, int[] users, int device, System.AsyncCallback callback, object asyncState);

    void EndPushMessageForSelectedUsers(System.IAsyncResult result);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IWBidPushSerivceChannel : IWBidPushSerivce, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class RegistorDevicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    public RegistorDevicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    public int Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class RegisterDevicesForPushNotiifcationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    public RegisterDevicesForPushNotiifcationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    public int Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class ResetBadgeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    public ResetBadgeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    public int Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class ResetPushBadgeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    public ResetPushBadgeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
    {
        this.results = results;
    }

    public int Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class WBidPushSerivceClient : System.ServiceModel.ClientBase<IWBidPushSerivce>, IWBidPushSerivce
{

    private BeginOperationDelegate onBeginRegistorDevicesDelegate;

    private EndOperationDelegate onEndRegistorDevicesDelegate;

    private System.Threading.SendOrPostCallback onRegistorDevicesCompletedDelegate;

    private BeginOperationDelegate onBeginRegisterDevicesForPushNotiifcationDelegate;

    private EndOperationDelegate onEndRegisterDevicesForPushNotiifcationDelegate;

    private System.Threading.SendOrPostCallback onRegisterDevicesForPushNotiifcationCompletedDelegate;

    private BeginOperationDelegate onBeginResetBadgeDelegate;

    private EndOperationDelegate onEndResetBadgeDelegate;

    private System.Threading.SendOrPostCallback onResetBadgeCompletedDelegate;

    private BeginOperationDelegate onBeginResetPushBadgeDelegate;

    private EndOperationDelegate onEndResetPushBadgeDelegate;

    private System.Threading.SendOrPostCallback onResetPushBadgeCompletedDelegate;

    private BeginOperationDelegate onBeginPushMessageDelegate;

    private EndOperationDelegate onEndPushMessageDelegate;

    private System.Threading.SendOrPostCallback onPushMessageCompletedDelegate;

    private BeginOperationDelegate onBeginPushMessageWithFromAppDelegate;

    private EndOperationDelegate onEndPushMessageWithFromAppDelegate;

    private System.Threading.SendOrPostCallback onPushMessageWithFromAppCompletedDelegate;

    private BeginOperationDelegate onBeginPushMessageManuallyDelegate;

    private EndOperationDelegate onEndPushMessageManuallyDelegate;

    private System.Threading.SendOrPostCallback onPushMessageManuallyCompletedDelegate;

    private BeginOperationDelegate onBeginPushMessageForSelectedUsersDelegate;

    private EndOperationDelegate onEndPushMessageForSelectedUsersDelegate;

    private System.Threading.SendOrPostCallback onPushMessageForSelectedUsersCompletedDelegate;

    private BeginOperationDelegate onBeginOpenDelegate;

    private EndOperationDelegate onEndOpenDelegate;

    private System.Threading.SendOrPostCallback onOpenCompletedDelegate;

    private BeginOperationDelegate onBeginCloseDelegate;

    private EndOperationDelegate onEndCloseDelegate;

    private System.Threading.SendOrPostCallback onCloseCompletedDelegate;

    public WBidPushSerivceClient()
    {
    }

    public WBidPushSerivceClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
    {
    }

    public WBidPushSerivceClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
    {
    }

    public WBidPushSerivceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
    {
    }

    public WBidPushSerivceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
    {
    }

    public System.Net.CookieContainer CookieContainer
    {
        get
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                return httpCookieContainerManager.CookieContainer;
            }
            else
            {
                return null;
            }
        }
        set
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                httpCookieContainerManager.CookieContainer = value;
            }
            else
            {
                throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                        "ookieContainerBindingElement.");
            }
        }
    }

    public event System.EventHandler<RegistorDevicesCompletedEventArgs> RegistorDevicesCompleted;

    public event System.EventHandler<RegisterDevicesForPushNotiifcationCompletedEventArgs> RegisterDevicesForPushNotiifcationCompleted;

    public event System.EventHandler<ResetBadgeCompletedEventArgs> ResetBadgeCompleted;

    public event System.EventHandler<ResetPushBadgeCompletedEventArgs> ResetPushBadgeCompleted;

    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PushMessageCompleted;

    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PushMessageWithFromAppCompleted;

    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PushMessageManuallyCompleted;

    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PushMessageForSelectedUsersCompleted;

    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;

    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IWBidPushSerivce.BeginRegistorDevices(WBidPushService.Model.PushDeviceDetails pushDeviceDetails, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginRegistorDevices(pushDeviceDetails, callback, asyncState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    int IWBidPushSerivce.EndRegistorDevices(System.IAsyncResult result)
    {
        return base.Channel.EndRegistorDevices(result);
    }

    private System.IAsyncResult OnBeginRegistorDevices(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        WBidPushService.Model.PushDeviceDetails pushDeviceDetails = ((WBidPushService.Model.PushDeviceDetails)(inValues[0]));
        return ((IWBidPushSerivce)(this)).BeginRegistorDevices(pushDeviceDetails, callback, asyncState);
    }

    private object[] OnEndRegistorDevices(System.IAsyncResult result)
    {
        int retVal = ((IWBidPushSerivce)(this)).EndRegistorDevices(result);
        return new object[] {
                retVal};
    }

    private void OnRegistorDevicesCompleted(object state)
    {
        if ((this.RegistorDevicesCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.RegistorDevicesCompleted(this, new RegistorDevicesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }

    public void RegistorDevicesAsync(WBidPushService.Model.PushDeviceDetails pushDeviceDetails)
    {
        this.RegistorDevicesAsync(pushDeviceDetails, null);
    }

    public void RegistorDevicesAsync(WBidPushService.Model.PushDeviceDetails pushDeviceDetails, object userState)
    {
        if ((this.onBeginRegistorDevicesDelegate == null))
        {
            this.onBeginRegistorDevicesDelegate = new BeginOperationDelegate(this.OnBeginRegistorDevices);
        }
        if ((this.onEndRegistorDevicesDelegate == null))
        {
            this.onEndRegistorDevicesDelegate = new EndOperationDelegate(this.OnEndRegistorDevices);
        }
        if ((this.onRegistorDevicesCompletedDelegate == null))
        {
            this.onRegistorDevicesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegistorDevicesCompleted);
        }
        base.InvokeAsync(this.onBeginRegistorDevicesDelegate, new object[] {
                    pushDeviceDetails}, this.onEndRegistorDevicesDelegate, this.onRegistorDevicesCompletedDelegate, userState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IWBidPushSerivce.BeginRegisterDevicesForPushNotiifcation(WBidPushService.Model.PushDeviceDetails pushDeviceDetails, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginRegisterDevicesForPushNotiifcation(pushDeviceDetails, callback, asyncState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    int IWBidPushSerivce.EndRegisterDevicesForPushNotiifcation(System.IAsyncResult result)
    {
        return base.Channel.EndRegisterDevicesForPushNotiifcation(result);
    }

    private System.IAsyncResult OnBeginRegisterDevicesForPushNotiifcation(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        WBidPushService.Model.PushDeviceDetails pushDeviceDetails = ((WBidPushService.Model.PushDeviceDetails)(inValues[0]));
        return ((IWBidPushSerivce)(this)).BeginRegisterDevicesForPushNotiifcation(pushDeviceDetails, callback, asyncState);
    }

    private object[] OnEndRegisterDevicesForPushNotiifcation(System.IAsyncResult result)
    {
        int retVal = ((IWBidPushSerivce)(this)).EndRegisterDevicesForPushNotiifcation(result);
        return new object[] {
                retVal};
    }

    private void OnRegisterDevicesForPushNotiifcationCompleted(object state)
    {
        if ((this.RegisterDevicesForPushNotiifcationCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.RegisterDevicesForPushNotiifcationCompleted(this, new RegisterDevicesForPushNotiifcationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }

    public void RegisterDevicesForPushNotiifcationAsync(WBidPushService.Model.PushDeviceDetails pushDeviceDetails)
    {
        this.RegisterDevicesForPushNotiifcationAsync(pushDeviceDetails, null);
    }

    public void RegisterDevicesForPushNotiifcationAsync(WBidPushService.Model.PushDeviceDetails pushDeviceDetails, object userState)
    {
        if ((this.onBeginRegisterDevicesForPushNotiifcationDelegate == null))
        {
            this.onBeginRegisterDevicesForPushNotiifcationDelegate = new BeginOperationDelegate(this.OnBeginRegisterDevicesForPushNotiifcation);
        }
        if ((this.onEndRegisterDevicesForPushNotiifcationDelegate == null))
        {
            this.onEndRegisterDevicesForPushNotiifcationDelegate = new EndOperationDelegate(this.OnEndRegisterDevicesForPushNotiifcation);
        }
        if ((this.onRegisterDevicesForPushNotiifcationCompletedDelegate == null))
        {
            this.onRegisterDevicesForPushNotiifcationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterDevicesForPushNotiifcationCompleted);
        }
        base.InvokeAsync(this.onBeginRegisterDevicesForPushNotiifcationDelegate, new object[] {
                    pushDeviceDetails}, this.onEndRegisterDevicesForPushNotiifcationDelegate, this.onRegisterDevicesForPushNotiifcationCompletedDelegate, userState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IWBidPushSerivce.BeginResetBadge(System.Guid deviceId, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginResetBadge(deviceId, callback, asyncState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    int IWBidPushSerivce.EndResetBadge(System.IAsyncResult result)
    {
        return base.Channel.EndResetBadge(result);
    }

    private System.IAsyncResult OnBeginResetBadge(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        System.Guid deviceId = ((System.Guid)(inValues[0]));
        return ((IWBidPushSerivce)(this)).BeginResetBadge(deviceId, callback, asyncState);
    }

    private object[] OnEndResetBadge(System.IAsyncResult result)
    {
        int retVal = ((IWBidPushSerivce)(this)).EndResetBadge(result);
        return new object[] {
                retVal};
    }

    private void OnResetBadgeCompleted(object state)
    {
        if ((this.ResetBadgeCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.ResetBadgeCompleted(this, new ResetBadgeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }

    public void ResetBadgeAsync(System.Guid deviceId)
    {
        this.ResetBadgeAsync(deviceId, null);
    }

    public void ResetBadgeAsync(System.Guid deviceId, object userState)
    {
        if ((this.onBeginResetBadgeDelegate == null))
        {
            this.onBeginResetBadgeDelegate = new BeginOperationDelegate(this.OnBeginResetBadge);
        }
        if ((this.onEndResetBadgeDelegate == null))
        {
            this.onEndResetBadgeDelegate = new EndOperationDelegate(this.OnEndResetBadge);
        }
        if ((this.onResetBadgeCompletedDelegate == null))
        {
            this.onResetBadgeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResetBadgeCompleted);
        }
        base.InvokeAsync(this.onBeginResetBadgeDelegate, new object[] {
                    deviceId}, this.onEndResetBadgeDelegate, this.onResetBadgeCompletedDelegate, userState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IWBidPushSerivce.BeginResetPushBadge(WBidPushService.Model.ResetBadgeParam resetbadgeParam, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginResetPushBadge(resetbadgeParam, callback, asyncState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    int IWBidPushSerivce.EndResetPushBadge(System.IAsyncResult result)
    {
        return base.Channel.EndResetPushBadge(result);
    }

    private System.IAsyncResult OnBeginResetPushBadge(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        WBidPushService.Model.ResetBadgeParam resetbadgeParam = ((WBidPushService.Model.ResetBadgeParam)(inValues[0]));
        return ((IWBidPushSerivce)(this)).BeginResetPushBadge(resetbadgeParam, callback, asyncState);
    }

    private object[] OnEndResetPushBadge(System.IAsyncResult result)
    {
        int retVal = ((IWBidPushSerivce)(this)).EndResetPushBadge(result);
        return new object[] {
                retVal};
    }

    private void OnResetPushBadgeCompleted(object state)
    {
        if ((this.ResetPushBadgeCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.ResetPushBadgeCompleted(this, new ResetPushBadgeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }

    public void ResetPushBadgeAsync(WBidPushService.Model.ResetBadgeParam resetbadgeParam)
    {
        this.ResetPushBadgeAsync(resetbadgeParam, null);
    }

    public void ResetPushBadgeAsync(WBidPushService.Model.ResetBadgeParam resetbadgeParam, object userState)
    {
        if ((this.onBeginResetPushBadgeDelegate == null))
        {
            this.onBeginResetPushBadgeDelegate = new BeginOperationDelegate(this.OnBeginResetPushBadge);
        }
        if ((this.onEndResetPushBadgeDelegate == null))
        {
            this.onEndResetPushBadgeDelegate = new EndOperationDelegate(this.OnEndResetPushBadge);
        }
        if ((this.onResetPushBadgeCompletedDelegate == null))
        {
            this.onResetPushBadgeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResetPushBadgeCompleted);
        }
        base.InvokeAsync(this.onBeginResetPushBadgeDelegate, new object[] {
                    resetbadgeParam}, this.onEndResetPushBadgeDelegate, this.onResetPushBadgeCompletedDelegate, userState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IWBidPushSerivce.BeginPushMessage(long pushmessageId, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginPushMessage(pushmessageId, callback, asyncState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    void IWBidPushSerivce.EndPushMessage(System.IAsyncResult result)
    {
        base.Channel.EndPushMessage(result);
    }

    private System.IAsyncResult OnBeginPushMessage(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        long pushmessageId = ((long)(inValues[0]));
        return ((IWBidPushSerivce)(this)).BeginPushMessage(pushmessageId, callback, asyncState);
    }

    private object[] OnEndPushMessage(System.IAsyncResult result)
    {
        ((IWBidPushSerivce)(this)).EndPushMessage(result);
        return null;
    }

    private void OnPushMessageCompleted(object state)
    {
        if ((this.PushMessageCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.PushMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }

    public void PushMessageAsync(long pushmessageId)
    {
        this.PushMessageAsync(pushmessageId, null);
    }

    public void PushMessageAsync(long pushmessageId, object userState)
    {
        if ((this.onBeginPushMessageDelegate == null))
        {
            this.onBeginPushMessageDelegate = new BeginOperationDelegate(this.OnBeginPushMessage);
        }
        if ((this.onEndPushMessageDelegate == null))
        {
            this.onEndPushMessageDelegate = new EndOperationDelegate(this.OnEndPushMessage);
        }
        if ((this.onPushMessageCompletedDelegate == null))
        {
            this.onPushMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPushMessageCompleted);
        }
        base.InvokeAsync(this.onBeginPushMessageDelegate, new object[] {
                    pushmessageId}, this.onEndPushMessageDelegate, this.onPushMessageCompletedDelegate, userState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IWBidPushSerivce.BeginPushMessageWithFromApp(long pushmessageId, int[] fromApps, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginPushMessageWithFromApp(pushmessageId, fromApps, callback, asyncState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    void IWBidPushSerivce.EndPushMessageWithFromApp(System.IAsyncResult result)
    {
        base.Channel.EndPushMessageWithFromApp(result);
    }

    private System.IAsyncResult OnBeginPushMessageWithFromApp(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        long pushmessageId = ((long)(inValues[0]));
        int[] fromApps = ((int[])(inValues[1]));
        return ((IWBidPushSerivce)(this)).BeginPushMessageWithFromApp(pushmessageId, fromApps, callback, asyncState);
    }

    private object[] OnEndPushMessageWithFromApp(System.IAsyncResult result)
    {
        ((IWBidPushSerivce)(this)).EndPushMessageWithFromApp(result);
        return null;
    }

    private void OnPushMessageWithFromAppCompleted(object state)
    {
        if ((this.PushMessageWithFromAppCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.PushMessageWithFromAppCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }

    public void PushMessageWithFromAppAsync(long pushmessageId, int[] fromApps)
    {
        this.PushMessageWithFromAppAsync(pushmessageId, fromApps, null);
    }

    public void PushMessageWithFromAppAsync(long pushmessageId, int[] fromApps, object userState)
    {
        if ((this.onBeginPushMessageWithFromAppDelegate == null))
        {
            this.onBeginPushMessageWithFromAppDelegate = new BeginOperationDelegate(this.OnBeginPushMessageWithFromApp);
        }
        if ((this.onEndPushMessageWithFromAppDelegate == null))
        {
            this.onEndPushMessageWithFromAppDelegate = new EndOperationDelegate(this.OnEndPushMessageWithFromApp);
        }
        if ((this.onPushMessageWithFromAppCompletedDelegate == null))
        {
            this.onPushMessageWithFromAppCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPushMessageWithFromAppCompleted);
        }
        base.InvokeAsync(this.onBeginPushMessageWithFromAppDelegate, new object[] {
                    pushmessageId,
                    fromApps}, this.onEndPushMessageWithFromAppDelegate, this.onPushMessageWithFromAppCompletedDelegate, userState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IWBidPushSerivce.BeginPushMessageManually(string message, int position, int device, int[] fromapps, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginPushMessageManually(message, position, device, fromapps, callback, asyncState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    void IWBidPushSerivce.EndPushMessageManually(System.IAsyncResult result)
    {
        base.Channel.EndPushMessageManually(result);
    }

    private System.IAsyncResult OnBeginPushMessageManually(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string message = ((string)(inValues[0]));
        int position = ((int)(inValues[1]));
        int device = ((int)(inValues[2]));
        int[] fromapps = ((int[])(inValues[3]));
        return ((IWBidPushSerivce)(this)).BeginPushMessageManually(message, position, device, fromapps, callback, asyncState);
    }

    private object[] OnEndPushMessageManually(System.IAsyncResult result)
    {
        ((IWBidPushSerivce)(this)).EndPushMessageManually(result);
        return null;
    }

    private void OnPushMessageManuallyCompleted(object state)
    {
        if ((this.PushMessageManuallyCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.PushMessageManuallyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }

    public void PushMessageManuallyAsync(string message, int position, int device, int[] fromapps)
    {
        this.PushMessageManuallyAsync(message, position, device, fromapps, null);
    }

    public void PushMessageManuallyAsync(string message, int position, int device, int[] fromapps, object userState)
    {
        if ((this.onBeginPushMessageManuallyDelegate == null))
        {
            this.onBeginPushMessageManuallyDelegate = new BeginOperationDelegate(this.OnBeginPushMessageManually);
        }
        if ((this.onEndPushMessageManuallyDelegate == null))
        {
            this.onEndPushMessageManuallyDelegate = new EndOperationDelegate(this.OnEndPushMessageManually);
        }
        if ((this.onPushMessageManuallyCompletedDelegate == null))
        {
            this.onPushMessageManuallyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPushMessageManuallyCompleted);
        }
        base.InvokeAsync(this.onBeginPushMessageManuallyDelegate, new object[] {
                    message,
                    position,
                    device,
                    fromapps}, this.onEndPushMessageManuallyDelegate, this.onPushMessageManuallyCompletedDelegate, userState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IWBidPushSerivce.BeginPushMessageForSelectedUsers(string message, int[] users, int device, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginPushMessageForSelectedUsers(message, users, device, callback, asyncState);
    }

    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    void IWBidPushSerivce.EndPushMessageForSelectedUsers(System.IAsyncResult result)
    {
        base.Channel.EndPushMessageForSelectedUsers(result);
    }

    private System.IAsyncResult OnBeginPushMessageForSelectedUsers(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string message = ((string)(inValues[0]));
        int[] users = ((int[])(inValues[1]));
        int device = ((int)(inValues[2]));
        return ((IWBidPushSerivce)(this)).BeginPushMessageForSelectedUsers(message, users, device, callback, asyncState);
    }

    private object[] OnEndPushMessageForSelectedUsers(System.IAsyncResult result)
    {
        ((IWBidPushSerivce)(this)).EndPushMessageForSelectedUsers(result);
        return null;
    }

    private void OnPushMessageForSelectedUsersCompleted(object state)
    {
        if ((this.PushMessageForSelectedUsersCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.PushMessageForSelectedUsersCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }

    public void PushMessageForSelectedUsersAsync(string message, int[] users, int device)
    {
        this.PushMessageForSelectedUsersAsync(message, users, device, null);
    }

    public void PushMessageForSelectedUsersAsync(string message, int[] users, int device, object userState)
    {
        if ((this.onBeginPushMessageForSelectedUsersDelegate == null))
        {
            this.onBeginPushMessageForSelectedUsersDelegate = new BeginOperationDelegate(this.OnBeginPushMessageForSelectedUsers);
        }
        if ((this.onEndPushMessageForSelectedUsersDelegate == null))
        {
            this.onEndPushMessageForSelectedUsersDelegate = new EndOperationDelegate(this.OnEndPushMessageForSelectedUsers);
        }
        if ((this.onPushMessageForSelectedUsersCompletedDelegate == null))
        {
            this.onPushMessageForSelectedUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPushMessageForSelectedUsersCompleted);
        }
        base.InvokeAsync(this.onBeginPushMessageForSelectedUsersDelegate, new object[] {
                    message,
                    users,
                    device}, this.onEndPushMessageForSelectedUsersDelegate, this.onPushMessageForSelectedUsersCompletedDelegate, userState);
    }

    private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
    }

    private object[] OnEndOpen(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
        return null;
    }

    private void OnOpenCompleted(object state)
    {
        if ((this.OpenCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }

    public void OpenAsync()
    {
        this.OpenAsync(null);
    }

    public void OpenAsync(object userState)
    {
        if ((this.onBeginOpenDelegate == null))
        {
            this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
        }
        if ((this.onEndOpenDelegate == null))
        {
            this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
        }
        if ((this.onOpenCompletedDelegate == null))
        {
            this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
        }
        base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
    }

    private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
    }

    private object[] OnEndClose(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
        return null;
    }

    private void OnCloseCompleted(object state)
    {
        if ((this.CloseCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }

    public void CloseAsync()
    {
        this.CloseAsync(null);
    }

    public void CloseAsync(object userState)
    {
        if ((this.onBeginCloseDelegate == null))
        {
            this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
        }
        if ((this.onEndCloseDelegate == null))
        {
            this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
        }
        if ((this.onCloseCompletedDelegate == null))
        {
            this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
        }
        base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
    }

    protected override IWBidPushSerivce CreateChannel()
    {
        return new WBidPushSerivceClientChannel(this);
    }

    private class WBidPushSerivceClientChannel : ChannelBase<IWBidPushSerivce>, IWBidPushSerivce
    {

        public WBidPushSerivceClientChannel(System.ServiceModel.ClientBase<IWBidPushSerivce> client) :
                base(client)
        {
        }

        public System.IAsyncResult BeginRegistorDevices(WBidPushService.Model.PushDeviceDetails pushDeviceDetails, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = pushDeviceDetails;
            System.IAsyncResult _result = base.BeginInvoke("RegistorDevices", _args, callback, asyncState);
            return _result;
        }

        public int EndRegistorDevices(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            int _result = ((int)(base.EndInvoke("RegistorDevices", _args, result)));
            return _result;
        }

        public System.IAsyncResult BeginRegisterDevicesForPushNotiifcation(WBidPushService.Model.PushDeviceDetails pushDeviceDetails, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = pushDeviceDetails;
            System.IAsyncResult _result = base.BeginInvoke("RegisterDevicesForPushNotiifcation", _args, callback, asyncState);
            return _result;
        }

        public int EndRegisterDevicesForPushNotiifcation(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            int _result = ((int)(base.EndInvoke("RegisterDevicesForPushNotiifcation", _args, result)));
            return _result;
        }

        public System.IAsyncResult BeginResetBadge(System.Guid deviceId, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = deviceId;
            System.IAsyncResult _result = base.BeginInvoke("ResetBadge", _args, callback, asyncState);
            return _result;
        }

        public int EndResetBadge(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            int _result = ((int)(base.EndInvoke("ResetBadge", _args, result)));
            return _result;
        }

        public System.IAsyncResult BeginResetPushBadge(WBidPushService.Model.ResetBadgeParam resetbadgeParam, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = resetbadgeParam;
            System.IAsyncResult _result = base.BeginInvoke("ResetPushBadge", _args, callback, asyncState);
            return _result;
        }

        public int EndResetPushBadge(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            int _result = ((int)(base.EndInvoke("ResetPushBadge", _args, result)));
            return _result;
        }

        public System.IAsyncResult BeginPushMessage(long pushmessageId, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = pushmessageId;
            System.IAsyncResult _result = base.BeginInvoke("PushMessage", _args, callback, asyncState);
            return _result;
        }

        public void EndPushMessage(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            base.EndInvoke("PushMessage", _args, result);
        }

        public System.IAsyncResult BeginPushMessageWithFromApp(long pushmessageId, int[] fromApps, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[2];
            _args[0] = pushmessageId;
            _args[1] = fromApps;
            System.IAsyncResult _result = base.BeginInvoke("PushMessageWithFromApp", _args, callback, asyncState);
            return _result;
        }

        public void EndPushMessageWithFromApp(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            base.EndInvoke("PushMessageWithFromApp", _args, result);
        }

        public System.IAsyncResult BeginPushMessageManually(string message, int position, int device, int[] fromapps, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[4];
            _args[0] = message;
            _args[1] = position;
            _args[2] = device;
            _args[3] = fromapps;
            System.IAsyncResult _result = base.BeginInvoke("PushMessageManually", _args, callback, asyncState);
            return _result;
        }

        public void EndPushMessageManually(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            base.EndInvoke("PushMessageManually", _args, result);
        }

        public System.IAsyncResult BeginPushMessageForSelectedUsers(string message, int[] users, int device, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[3];
            _args[0] = message;
            _args[1] = users;
            _args[2] = device;
            System.IAsyncResult _result = base.BeginInvoke("PushMessageForSelectedUsers", _args, callback, asyncState);
            return _result;
        }

        public void EndPushMessageForSelectedUsers(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            base.EndInvoke("PushMessageForSelectedUsers", _args, result);
        }
    }
}
